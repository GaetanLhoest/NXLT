Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    LNOT
    RSHIFT
    VOID
    UMINUS
    DIVEQUAL
    LSHIFT
    COLON
    MODEQUAL
    OUT
    XOR
    PLUSPLUS
    PERIOD
    PLUSEQUAL
    MINUSMINUS
    AND
    LBRACKET
    MINUSEQUAL
    BREAK
    CONTINUE
    NOT
    RBRACKET
    TIMESEQUAL
    OR
    MOD

Grammar

Rule 0     S' -> program
Rule 1     program -> program function_definition
Rule 2     program -> function_definition
Rule 3     function_definition -> head NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
Rule 4     function_definition -> head LBRACE NEWLINE body RBRACE NEWLINE
Rule 5     head -> IDENTIFIER LPAREN argument_list RPAREN
Rule 6     head -> IDENTIFIER LPAREN RPAREN
Rule 7     argument_list -> argument_declaration
Rule 8     argument_list -> argument_declaration COMMA argument_list
Rule 9     argument_declaration -> IDENTIFIER
Rule 10    argument_declaration -> NUMBER
Rule 11    body -> body statement
Rule 12    body -> statement
Rule 13    statement -> assignment NEWLINE
Rule 14    statement -> multiple_assignment NEWLINE
Rule 15    statement -> parralel_assignment NEWLINE
Rule 16    statement -> if_block
Rule 17    statement -> if_block else_block
Rule 18    statement -> while_block NEWLINE
Rule 19    statement -> function_call NEWLINE
Rule 20    assignment -> IDENTIFIER EQUALS expression
Rule 21    multiple_assignment -> assignment
Rule 22    multiple_assignment -> IDENTIFIER EQUALS multiple_assignment
Rule 23    parralel_assignment -> assignment
Rule 24    parralel_assignment -> IDENTIFIER COMMA parralel_assignment COMMA expression
Rule 25    function_call -> IDENTIFIER LPAREN parameters_list RPAREN
Rule 26    function_call -> IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN
Rule 27    parameters_list -> IDENTIFIER
Rule 28    parameters_list -> NUMBER
Rule 29    parameters_list -> parameters_list COMMA IDENTIFIER
Rule 30    parameters_list -> parameters_list COMMA NUMBER
Rule 31    while_block -> WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
Rule 32    while_block -> WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
Rule 33    if_block -> IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
Rule 34    if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
Rule 35    if_block -> IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
Rule 36    if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
Rule 37    else_block -> ELSE LBRACE body RBRACE NEWLINE
Rule 38    else_block -> ELSE LBRACE NEWLINE body RBRACE NEWLINE
Rule 39    else_block -> ELSE NEWLINE LBRACE body RBRACE NEWLINE
Rule 40    else_block -> ELSE NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
Rule 41    condition_list -> condition
Rule 42    condition_list -> condition comb_symbol condition_list
Rule 43    comb_symbol -> LAND
Rule 44    comb_symbol -> LOR
Rule 45    condition -> IDENTIFIER comp_symbol IDENTIFIER
Rule 46    condition -> IDENTIFIER comp_symbol NUMBER
Rule 47    condition -> NUMBER comp_symbol IDENTIFIER
Rule 48    condition -> NUMBER comp_symbol NUMBER
Rule 49    comp_symbol -> LT
Rule 50    comp_symbol -> GT
Rule 51    comp_symbol -> LE
Rule 52    comp_symbol -> GE
Rule 53    comp_symbol -> EQ
Rule 54    comp_symbol -> NE
Rule 55    expression -> expression PLUS expression
Rule 56    expression -> expression MINUS expression
Rule 57    expression -> expression TIMES expression
Rule 58    expression -> expression DIVIDE expression
Rule 59    expression -> MINUS expression
Rule 60    expression -> NUMBER
Rule 61    expression -> IDENTIFIER

Terminals, with rules where they appear

AND                  : 
BREAK                : 
COLON                : 
COMMA                : 8 24 24 29 30
CONTINUE             : 
DIVEQUAL             : 
DIVIDE               : 58
ELSE                 : 37 38 39 40
EQ                   : 53
EQUALS               : 20 22 26
GE                   : 52
GT                   : 50
IDENTIFIER           : 5 6 9 20 22 24 25 26 26 27 29 45 45 46 47 61
IF                   : 33 34 35 36
LAND                 : 43
LBRACE               : 3 4 31 32 33 34 35 36 37 38 39 40
LBRACKET             : 
LE                   : 51
LNOT                 : 
LOR                  : 44
LPAREN               : 5 6 25 26 31 32 33 34 35 36
LSHIFT               : 
LT                   : 49
MINUS                : 56 59
MINUSEQUAL           : 
MINUSMINUS           : 
MOD                  : 
MODEQUAL             : 
NE                   : 54
NEWLINE              : 3 3 3 4 4 13 14 15 18 19 31 32 32 33 34 34 35 35 36 36 36 37 38 38 39 39 40 40 40
NOT                  : 
NUMBER               : 10 28 30 46 47 48 48 60
OR                   : 
OUT                  : 
PERIOD               : 
PLUS                 : 55
PLUSEQUAL            : 
PLUSPLUS             : 
RBRACE               : 3 4 31 32 33 34 35 36 37 38 39 40
RBRACKET             : 
RPAREN               : 5 6 25 26 31 32 33 34 35 36
RSHIFT               : 
TIMES                : 57
TIMESEQUAL           : 
UMINUS               : 
VOID                 : 
WHILE                : 31 32
XOR                  : 
error                : 

Nonterminals, with rules where they appear

argument_declaration : 7 8
argument_list        : 5 8
assignment           : 13 21 23
body                 : 3 4 11 31 32 33 34 35 36 37 38 39 40
comb_symbol          : 42
comp_symbol          : 45 46 47 48
condition            : 41 42
condition_list       : 31 32 33 34 35 36 42
else_block           : 17
expression           : 20 24 55 55 56 56 57 57 58 58 59
function_call        : 19
function_definition  : 1 2
head                 : 3 4
if_block             : 16 17
multiple_assignment  : 14 22
parameters_list      : 25 26 29 30
parralel_assignment  : 15 24
program              : 1 0
statement            : 11 12
while_block          : 18

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program function_definition
    (2) program -> . function_definition
    (3) function_definition -> . head NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (4) function_definition -> . head LBRACE NEWLINE body RBRACE NEWLINE
    (5) head -> . IDENTIFIER LPAREN argument_list RPAREN
    (6) head -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 4

    head                           shift and go to state 1
    program                        shift and go to state 3
    function_definition            shift and go to state 2

state 1

    (3) function_definition -> head . NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (4) function_definition -> head . LBRACE NEWLINE body RBRACE NEWLINE

    NEWLINE         shift and go to state 5
    LBRACE          shift and go to state 6


state 2

    (2) program -> function_definition .

    IDENTIFIER      reduce using rule 2 (program -> function_definition .)
    $end            reduce using rule 2 (program -> function_definition .)


state 3

    (0) S' -> program .
    (1) program -> program . function_definition
    (3) function_definition -> . head NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (4) function_definition -> . head LBRACE NEWLINE body RBRACE NEWLINE
    (5) head -> . IDENTIFIER LPAREN argument_list RPAREN
    (6) head -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 4

    head                           shift and go to state 1
    function_definition            shift and go to state 7

state 4

    (5) head -> IDENTIFIER . LPAREN argument_list RPAREN
    (6) head -> IDENTIFIER . LPAREN RPAREN

    LPAREN          shift and go to state 8


state 5

    (3) function_definition -> head NEWLINE . LBRACE NEWLINE body RBRACE NEWLINE

    LBRACE          shift and go to state 9


state 6

    (4) function_definition -> head LBRACE . NEWLINE body RBRACE NEWLINE

    NEWLINE         shift and go to state 10


state 7

    (1) program -> program function_definition .

    IDENTIFIER      reduce using rule 1 (program -> program function_definition .)
    $end            reduce using rule 1 (program -> program function_definition .)


state 8

    (5) head -> IDENTIFIER LPAREN . argument_list RPAREN
    (6) head -> IDENTIFIER LPAREN . RPAREN
    (7) argument_list -> . argument_declaration
    (8) argument_list -> . argument_declaration COMMA argument_list
    (9) argument_declaration -> . IDENTIFIER
    (10) argument_declaration -> . NUMBER

    RPAREN          shift and go to state 11
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 12

    argument_declaration           shift and go to state 14
    argument_list                  shift and go to state 13

state 9

    (3) function_definition -> head NEWLINE LBRACE . NEWLINE body RBRACE NEWLINE

    NEWLINE         shift and go to state 16


state 10

    (4) function_definition -> head LBRACE NEWLINE . body RBRACE NEWLINE
    (11) body -> . body statement
    (12) body -> . statement
    (13) statement -> . assignment NEWLINE
    (14) statement -> . multiple_assignment NEWLINE
    (15) statement -> . parralel_assignment NEWLINE
    (16) statement -> . if_block
    (17) statement -> . if_block else_block
    (18) statement -> . while_block NEWLINE
    (19) statement -> . function_call NEWLINE
    (20) assignment -> . IDENTIFIER EQUALS expression
    (21) multiple_assignment -> . assignment
    (22) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (23) parralel_assignment -> . assignment
    (24) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (33) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (36) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (32) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (25) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (26) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    IDENTIFIER      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 18

    body                           shift and go to state 22
    parralel_assignment            shift and go to state 19
    assignment                     shift and go to state 23
    if_block                       shift and go to state 26
    function_call                  shift and go to state 17
    while_block                    shift and go to state 27
    statement                      shift and go to state 20
    multiple_assignment            shift and go to state 24

state 11

    (6) head -> IDENTIFIER LPAREN RPAREN .

    NEWLINE         reduce using rule 6 (head -> IDENTIFIER LPAREN RPAREN .)
    LBRACE          reduce using rule 6 (head -> IDENTIFIER LPAREN RPAREN .)


state 12

    (10) argument_declaration -> NUMBER .

    COMMA           reduce using rule 10 (argument_declaration -> NUMBER .)
    RPAREN          reduce using rule 10 (argument_declaration -> NUMBER .)


state 13

    (5) head -> IDENTIFIER LPAREN argument_list . RPAREN

    RPAREN          shift and go to state 28


state 14

    (7) argument_list -> argument_declaration .
    (8) argument_list -> argument_declaration . COMMA argument_list

    RPAREN          reduce using rule 7 (argument_list -> argument_declaration .)
    COMMA           shift and go to state 29


state 15

    (9) argument_declaration -> IDENTIFIER .

    COMMA           reduce using rule 9 (argument_declaration -> IDENTIFIER .)
    RPAREN          reduce using rule 9 (argument_declaration -> IDENTIFIER .)


state 16

    (3) function_definition -> head NEWLINE LBRACE NEWLINE . body RBRACE NEWLINE
    (11) body -> . body statement
    (12) body -> . statement
    (13) statement -> . assignment NEWLINE
    (14) statement -> . multiple_assignment NEWLINE
    (15) statement -> . parralel_assignment NEWLINE
    (16) statement -> . if_block
    (17) statement -> . if_block else_block
    (18) statement -> . while_block NEWLINE
    (19) statement -> . function_call NEWLINE
    (20) assignment -> . IDENTIFIER EQUALS expression
    (21) multiple_assignment -> . assignment
    (22) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (23) parralel_assignment -> . assignment
    (24) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (33) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (36) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (32) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (25) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (26) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    IDENTIFIER      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 18

    body                           shift and go to state 30
    parralel_assignment            shift and go to state 19
    assignment                     shift and go to state 23
    if_block                       shift and go to state 26
    function_call                  shift and go to state 17
    while_block                    shift and go to state 27
    statement                      shift and go to state 20
    multiple_assignment            shift and go to state 24

state 17

    (19) statement -> function_call . NEWLINE

    NEWLINE         shift and go to state 31


state 18

    (31) while_block -> WHILE . LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (32) while_block -> WHILE . LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE

    LPAREN          shift and go to state 32


state 19

    (15) statement -> parralel_assignment . NEWLINE

    NEWLINE         shift and go to state 33


state 20

    (12) body -> statement .

    RBRACE          reduce using rule 12 (body -> statement .)
    IDENTIFIER      reduce using rule 12 (body -> statement .)
    IF              reduce using rule 12 (body -> statement .)
    WHILE           reduce using rule 12 (body -> statement .)


state 21

    (20) assignment -> IDENTIFIER . EQUALS expression
    (22) multiple_assignment -> IDENTIFIER . EQUALS multiple_assignment
    (24) parralel_assignment -> IDENTIFIER . COMMA parralel_assignment COMMA expression
    (25) function_call -> IDENTIFIER . LPAREN parameters_list RPAREN
    (26) function_call -> IDENTIFIER . EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    EQUALS          shift and go to state 34
    COMMA           shift and go to state 35
    LPAREN          shift and go to state 36


state 22

    (4) function_definition -> head LBRACE NEWLINE body . RBRACE NEWLINE
    (11) body -> body . statement
    (13) statement -> . assignment NEWLINE
    (14) statement -> . multiple_assignment NEWLINE
    (15) statement -> . parralel_assignment NEWLINE
    (16) statement -> . if_block
    (17) statement -> . if_block else_block
    (18) statement -> . while_block NEWLINE
    (19) statement -> . function_call NEWLINE
    (20) assignment -> . IDENTIFIER EQUALS expression
    (21) multiple_assignment -> . assignment
    (22) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (23) parralel_assignment -> . assignment
    (24) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (33) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (36) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (32) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (25) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (26) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    RBRACE          shift and go to state 38
    IDENTIFIER      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 18

    parralel_assignment            shift and go to state 19
    assignment                     shift and go to state 23
    if_block                       shift and go to state 26
    function_call                  shift and go to state 17
    while_block                    shift and go to state 27
    statement                      shift and go to state 37
    multiple_assignment            shift and go to state 24

state 23

    (13) statement -> assignment . NEWLINE
    (21) multiple_assignment -> assignment .
    (23) parralel_assignment -> assignment .

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 39

  ! NEWLINE         [ reduce using rule 21 (multiple_assignment -> assignment .) ]
  ! NEWLINE         [ reduce using rule 23 (parralel_assignment -> assignment .) ]


state 24

    (14) statement -> multiple_assignment . NEWLINE

    NEWLINE         shift and go to state 40


state 25

    (33) if_block -> IF . LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (34) if_block -> IF . LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (35) if_block -> IF . LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (36) if_block -> IF . LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE

    LPAREN          shift and go to state 41


state 26

    (16) statement -> if_block .
    (17) statement -> if_block . else_block
    (37) else_block -> . ELSE LBRACE body RBRACE NEWLINE
    (38) else_block -> . ELSE LBRACE NEWLINE body RBRACE NEWLINE
    (39) else_block -> . ELSE NEWLINE LBRACE body RBRACE NEWLINE
    (40) else_block -> . ELSE NEWLINE LBRACE NEWLINE body RBRACE NEWLINE

    RBRACE          reduce using rule 16 (statement -> if_block .)
    IDENTIFIER      reduce using rule 16 (statement -> if_block .)
    IF              reduce using rule 16 (statement -> if_block .)
    WHILE           reduce using rule 16 (statement -> if_block .)
    ELSE            shift and go to state 42

    else_block                     shift and go to state 43

state 27

    (18) statement -> while_block . NEWLINE

    NEWLINE         shift and go to state 44


state 28

    (5) head -> IDENTIFIER LPAREN argument_list RPAREN .

    NEWLINE         reduce using rule 5 (head -> IDENTIFIER LPAREN argument_list RPAREN .)
    LBRACE          reduce using rule 5 (head -> IDENTIFIER LPAREN argument_list RPAREN .)


state 29

    (8) argument_list -> argument_declaration COMMA . argument_list
    (7) argument_list -> . argument_declaration
    (8) argument_list -> . argument_declaration COMMA argument_list
    (9) argument_declaration -> . IDENTIFIER
    (10) argument_declaration -> . NUMBER

    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 12

    argument_declaration           shift and go to state 14
    argument_list                  shift and go to state 45

state 30

    (3) function_definition -> head NEWLINE LBRACE NEWLINE body . RBRACE NEWLINE
    (11) body -> body . statement
    (13) statement -> . assignment NEWLINE
    (14) statement -> . multiple_assignment NEWLINE
    (15) statement -> . parralel_assignment NEWLINE
    (16) statement -> . if_block
    (17) statement -> . if_block else_block
    (18) statement -> . while_block NEWLINE
    (19) statement -> . function_call NEWLINE
    (20) assignment -> . IDENTIFIER EQUALS expression
    (21) multiple_assignment -> . assignment
    (22) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (23) parralel_assignment -> . assignment
    (24) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (33) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (36) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (32) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (25) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (26) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    RBRACE          shift and go to state 46
    IDENTIFIER      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 18

    parralel_assignment            shift and go to state 19
    assignment                     shift and go to state 23
    if_block                       shift and go to state 26
    function_call                  shift and go to state 17
    while_block                    shift and go to state 27
    statement                      shift and go to state 37
    multiple_assignment            shift and go to state 24

state 31

    (19) statement -> function_call NEWLINE .

    RBRACE          reduce using rule 19 (statement -> function_call NEWLINE .)
    IDENTIFIER      reduce using rule 19 (statement -> function_call NEWLINE .)
    IF              reduce using rule 19 (statement -> function_call NEWLINE .)
    WHILE           reduce using rule 19 (statement -> function_call NEWLINE .)


state 32

    (31) while_block -> WHILE LPAREN . condition_list RPAREN LBRACE NEWLINE body RBRACE
    (32) while_block -> WHILE LPAREN . condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (41) condition_list -> . condition
    (42) condition_list -> . condition comb_symbol condition_list
    (45) condition -> . IDENTIFIER comp_symbol IDENTIFIER
    (46) condition -> . IDENTIFIER comp_symbol NUMBER
    (47) condition -> . NUMBER comp_symbol IDENTIFIER
    (48) condition -> . NUMBER comp_symbol NUMBER

    IDENTIFIER      shift and go to state 49
    NUMBER          shift and go to state 48

    condition_list                 shift and go to state 47
    condition                      shift and go to state 50

state 33

    (15) statement -> parralel_assignment NEWLINE .

    RBRACE          reduce using rule 15 (statement -> parralel_assignment NEWLINE .)
    IDENTIFIER      reduce using rule 15 (statement -> parralel_assignment NEWLINE .)
    IF              reduce using rule 15 (statement -> parralel_assignment NEWLINE .)
    WHILE           reduce using rule 15 (statement -> parralel_assignment NEWLINE .)


state 34

    (20) assignment -> IDENTIFIER EQUALS . expression
    (22) multiple_assignment -> IDENTIFIER EQUALS . multiple_assignment
    (26) function_call -> IDENTIFIER EQUALS . IDENTIFIER LPAREN parameters_list RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . MINUS expression
    (60) expression -> . NUMBER
    (61) expression -> . IDENTIFIER
    (21) multiple_assignment -> . assignment
    (22) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (20) assignment -> . IDENTIFIER EQUALS expression

    IDENTIFIER      shift and go to state 54
    MINUS           shift and go to state 56
    NUMBER          shift and go to state 51

    assignment                     shift and go to state 52
    expression                     shift and go to state 55
    multiple_assignment            shift and go to state 53

state 35

    (24) parralel_assignment -> IDENTIFIER COMMA . parralel_assignment COMMA expression
    (23) parralel_assignment -> . assignment
    (24) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (20) assignment -> . IDENTIFIER EQUALS expression

    IDENTIFIER      shift and go to state 59

    parralel_assignment            shift and go to state 57
    assignment                     shift and go to state 58

state 36

    (25) function_call -> IDENTIFIER LPAREN . parameters_list RPAREN
    (27) parameters_list -> . IDENTIFIER
    (28) parameters_list -> . NUMBER
    (29) parameters_list -> . parameters_list COMMA IDENTIFIER
    (30) parameters_list -> . parameters_list COMMA NUMBER

    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 61

    parameters_list                shift and go to state 60

state 37

    (11) body -> body statement .

    RBRACE          reduce using rule 11 (body -> body statement .)
    IDENTIFIER      reduce using rule 11 (body -> body statement .)
    IF              reduce using rule 11 (body -> body statement .)
    WHILE           reduce using rule 11 (body -> body statement .)


state 38

    (4) function_definition -> head LBRACE NEWLINE body RBRACE . NEWLINE

    NEWLINE         shift and go to state 63


state 39

    (13) statement -> assignment NEWLINE .

    RBRACE          reduce using rule 13 (statement -> assignment NEWLINE .)
    IDENTIFIER      reduce using rule 13 (statement -> assignment NEWLINE .)
    IF              reduce using rule 13 (statement -> assignment NEWLINE .)
    WHILE           reduce using rule 13 (statement -> assignment NEWLINE .)


state 40

    (14) statement -> multiple_assignment NEWLINE .

    RBRACE          reduce using rule 14 (statement -> multiple_assignment NEWLINE .)
    IDENTIFIER      reduce using rule 14 (statement -> multiple_assignment NEWLINE .)
    IF              reduce using rule 14 (statement -> multiple_assignment NEWLINE .)
    WHILE           reduce using rule 14 (statement -> multiple_assignment NEWLINE .)


state 41

    (33) if_block -> IF LPAREN . condition_list RPAREN LBRACE body RBRACE NEWLINE
    (34) if_block -> IF LPAREN . condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (35) if_block -> IF LPAREN . condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (36) if_block -> IF LPAREN . condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (41) condition_list -> . condition
    (42) condition_list -> . condition comb_symbol condition_list
    (45) condition -> . IDENTIFIER comp_symbol IDENTIFIER
    (46) condition -> . IDENTIFIER comp_symbol NUMBER
    (47) condition -> . NUMBER comp_symbol IDENTIFIER
    (48) condition -> . NUMBER comp_symbol NUMBER

    IDENTIFIER      shift and go to state 49
    NUMBER          shift and go to state 48

    condition_list                 shift and go to state 64
    condition                      shift and go to state 50

state 42

    (37) else_block -> ELSE . LBRACE body RBRACE NEWLINE
    (38) else_block -> ELSE . LBRACE NEWLINE body RBRACE NEWLINE
    (39) else_block -> ELSE . NEWLINE LBRACE body RBRACE NEWLINE
    (40) else_block -> ELSE . NEWLINE LBRACE NEWLINE body RBRACE NEWLINE

    LBRACE          shift and go to state 66
    NEWLINE         shift and go to state 65


state 43

    (17) statement -> if_block else_block .

    RBRACE          reduce using rule 17 (statement -> if_block else_block .)
    IDENTIFIER      reduce using rule 17 (statement -> if_block else_block .)
    IF              reduce using rule 17 (statement -> if_block else_block .)
    WHILE           reduce using rule 17 (statement -> if_block else_block .)


state 44

    (18) statement -> while_block NEWLINE .

    RBRACE          reduce using rule 18 (statement -> while_block NEWLINE .)
    IDENTIFIER      reduce using rule 18 (statement -> while_block NEWLINE .)
    IF              reduce using rule 18 (statement -> while_block NEWLINE .)
    WHILE           reduce using rule 18 (statement -> while_block NEWLINE .)


state 45

    (8) argument_list -> argument_declaration COMMA argument_list .

    RPAREN          reduce using rule 8 (argument_list -> argument_declaration COMMA argument_list .)


state 46

    (3) function_definition -> head NEWLINE LBRACE NEWLINE body RBRACE . NEWLINE

    NEWLINE         shift and go to state 67


state 47

    (31) while_block -> WHILE LPAREN condition_list . RPAREN LBRACE NEWLINE body RBRACE
    (32) while_block -> WHILE LPAREN condition_list . RPAREN NEWLINE LBRACE NEWLINE body RBRACE

    RPAREN          shift and go to state 68


state 48

    (47) condition -> NUMBER . comp_symbol IDENTIFIER
    (48) condition -> NUMBER . comp_symbol NUMBER
    (49) comp_symbol -> . LT
    (50) comp_symbol -> . GT
    (51) comp_symbol -> . LE
    (52) comp_symbol -> . GE
    (53) comp_symbol -> . EQ
    (54) comp_symbol -> . NE

    LT              shift and go to state 73
    GT              shift and go to state 74
    LE              shift and go to state 69
    GE              shift and go to state 70
    EQ              shift and go to state 75
    NE              shift and go to state 71

    comp_symbol                    shift and go to state 72

state 49

    (45) condition -> IDENTIFIER . comp_symbol IDENTIFIER
    (46) condition -> IDENTIFIER . comp_symbol NUMBER
    (49) comp_symbol -> . LT
    (50) comp_symbol -> . GT
    (51) comp_symbol -> . LE
    (52) comp_symbol -> . GE
    (53) comp_symbol -> . EQ
    (54) comp_symbol -> . NE

    LT              shift and go to state 73
    GT              shift and go to state 74
    LE              shift and go to state 69
    GE              shift and go to state 70
    EQ              shift and go to state 75
    NE              shift and go to state 71

    comp_symbol                    shift and go to state 76

state 50

    (41) condition_list -> condition .
    (42) condition_list -> condition . comb_symbol condition_list
    (43) comb_symbol -> . LAND
    (44) comb_symbol -> . LOR

    RPAREN          reduce using rule 41 (condition_list -> condition .)
    LAND            shift and go to state 79
    LOR             shift and go to state 78

    comb_symbol                    shift and go to state 77

state 51

    (60) expression -> NUMBER .

    PLUS            reduce using rule 60 (expression -> NUMBER .)
    MINUS           reduce using rule 60 (expression -> NUMBER .)
    TIMES           reduce using rule 60 (expression -> NUMBER .)
    DIVIDE          reduce using rule 60 (expression -> NUMBER .)
    NEWLINE         reduce using rule 60 (expression -> NUMBER .)
    COMMA           reduce using rule 60 (expression -> NUMBER .)


state 52

    (21) multiple_assignment -> assignment .

    NEWLINE         reduce using rule 21 (multiple_assignment -> assignment .)


state 53

    (22) multiple_assignment -> IDENTIFIER EQUALS multiple_assignment .

    NEWLINE         reduce using rule 22 (multiple_assignment -> IDENTIFIER EQUALS multiple_assignment .)


state 54

    (26) function_call -> IDENTIFIER EQUALS IDENTIFIER . LPAREN parameters_list RPAREN
    (61) expression -> IDENTIFIER .
    (22) multiple_assignment -> IDENTIFIER . EQUALS multiple_assignment
    (20) assignment -> IDENTIFIER . EQUALS expression

    LPAREN          shift and go to state 81
    PLUS            reduce using rule 61 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 61 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 61 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 61 (expression -> IDENTIFIER .)
    NEWLINE         reduce using rule 61 (expression -> IDENTIFIER .)
    EQUALS          shift and go to state 80


state 55

    (20) assignment -> IDENTIFIER EQUALS expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression

    NEWLINE         reduce using rule 20 (assignment -> IDENTIFIER EQUALS expression .)
    COMMA           reduce using rule 20 (assignment -> IDENTIFIER EQUALS expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 82


state 56

    (59) expression -> MINUS . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . MINUS expression
    (60) expression -> . NUMBER
    (61) expression -> . IDENTIFIER

    MINUS           shift and go to state 56
    NUMBER          shift and go to state 51
    IDENTIFIER      shift and go to state 86

    expression                     shift and go to state 87

state 57

    (24) parralel_assignment -> IDENTIFIER COMMA parralel_assignment . COMMA expression

    COMMA           shift and go to state 88


state 58

    (23) parralel_assignment -> assignment .

    COMMA           reduce using rule 23 (parralel_assignment -> assignment .)


state 59

    (24) parralel_assignment -> IDENTIFIER . COMMA parralel_assignment COMMA expression
    (20) assignment -> IDENTIFIER . EQUALS expression

    COMMA           shift and go to state 35
    EQUALS          shift and go to state 89


state 60

    (25) function_call -> IDENTIFIER LPAREN parameters_list . RPAREN
    (29) parameters_list -> parameters_list . COMMA IDENTIFIER
    (30) parameters_list -> parameters_list . COMMA NUMBER

    RPAREN          shift and go to state 90
    COMMA           shift and go to state 91


state 61

    (28) parameters_list -> NUMBER .

    RPAREN          reduce using rule 28 (parameters_list -> NUMBER .)
    COMMA           reduce using rule 28 (parameters_list -> NUMBER .)


state 62

    (27) parameters_list -> IDENTIFIER .

    RPAREN          reduce using rule 27 (parameters_list -> IDENTIFIER .)
    COMMA           reduce using rule 27 (parameters_list -> IDENTIFIER .)


state 63

    (4) function_definition -> head LBRACE NEWLINE body RBRACE NEWLINE .

    IDENTIFIER      reduce using rule 4 (function_definition -> head LBRACE NEWLINE body RBRACE NEWLINE .)
    $end            reduce using rule 4 (function_definition -> head LBRACE NEWLINE body RBRACE NEWLINE .)


state 64

    (33) if_block -> IF LPAREN condition_list . RPAREN LBRACE body RBRACE NEWLINE
    (34) if_block -> IF LPAREN condition_list . RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (35) if_block -> IF LPAREN condition_list . RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (36) if_block -> IF LPAREN condition_list . RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE

    RPAREN          shift and go to state 92


state 65

    (39) else_block -> ELSE NEWLINE . LBRACE body RBRACE NEWLINE
    (40) else_block -> ELSE NEWLINE . LBRACE NEWLINE body RBRACE NEWLINE

    LBRACE          shift and go to state 93


state 66

    (37) else_block -> ELSE LBRACE . body RBRACE NEWLINE
    (38) else_block -> ELSE LBRACE . NEWLINE body RBRACE NEWLINE
    (11) body -> . body statement
    (12) body -> . statement
    (13) statement -> . assignment NEWLINE
    (14) statement -> . multiple_assignment NEWLINE
    (15) statement -> . parralel_assignment NEWLINE
    (16) statement -> . if_block
    (17) statement -> . if_block else_block
    (18) statement -> . while_block NEWLINE
    (19) statement -> . function_call NEWLINE
    (20) assignment -> . IDENTIFIER EQUALS expression
    (21) multiple_assignment -> . assignment
    (22) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (23) parralel_assignment -> . assignment
    (24) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (33) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (36) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (32) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (25) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (26) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    NEWLINE         shift and go to state 94
    IDENTIFIER      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 18

    body                           shift and go to state 95
    parralel_assignment            shift and go to state 19
    assignment                     shift and go to state 23
    if_block                       shift and go to state 26
    function_call                  shift and go to state 17
    while_block                    shift and go to state 27
    statement                      shift and go to state 20
    multiple_assignment            shift and go to state 24

state 67

    (3) function_definition -> head NEWLINE LBRACE NEWLINE body RBRACE NEWLINE .

    IDENTIFIER      reduce using rule 3 (function_definition -> head NEWLINE LBRACE NEWLINE body RBRACE NEWLINE .)
    $end            reduce using rule 3 (function_definition -> head NEWLINE LBRACE NEWLINE body RBRACE NEWLINE .)


state 68

    (31) while_block -> WHILE LPAREN condition_list RPAREN . LBRACE NEWLINE body RBRACE
    (32) while_block -> WHILE LPAREN condition_list RPAREN . NEWLINE LBRACE NEWLINE body RBRACE

    LBRACE          shift and go to state 96
    NEWLINE         shift and go to state 97


state 69

    (51) comp_symbol -> LE .

    IDENTIFIER      reduce using rule 51 (comp_symbol -> LE .)
    NUMBER          reduce using rule 51 (comp_symbol -> LE .)


state 70

    (52) comp_symbol -> GE .

    IDENTIFIER      reduce using rule 52 (comp_symbol -> GE .)
    NUMBER          reduce using rule 52 (comp_symbol -> GE .)


state 71

    (54) comp_symbol -> NE .

    IDENTIFIER      reduce using rule 54 (comp_symbol -> NE .)
    NUMBER          reduce using rule 54 (comp_symbol -> NE .)


state 72

    (47) condition -> NUMBER comp_symbol . IDENTIFIER
    (48) condition -> NUMBER comp_symbol . NUMBER

    IDENTIFIER      shift and go to state 98
    NUMBER          shift and go to state 99


state 73

    (49) comp_symbol -> LT .

    IDENTIFIER      reduce using rule 49 (comp_symbol -> LT .)
    NUMBER          reduce using rule 49 (comp_symbol -> LT .)


state 74

    (50) comp_symbol -> GT .

    IDENTIFIER      reduce using rule 50 (comp_symbol -> GT .)
    NUMBER          reduce using rule 50 (comp_symbol -> GT .)


state 75

    (53) comp_symbol -> EQ .

    IDENTIFIER      reduce using rule 53 (comp_symbol -> EQ .)
    NUMBER          reduce using rule 53 (comp_symbol -> EQ .)


state 76

    (45) condition -> IDENTIFIER comp_symbol . IDENTIFIER
    (46) condition -> IDENTIFIER comp_symbol . NUMBER

    IDENTIFIER      shift and go to state 100
    NUMBER          shift and go to state 101


state 77

    (42) condition_list -> condition comb_symbol . condition_list
    (41) condition_list -> . condition
    (42) condition_list -> . condition comb_symbol condition_list
    (45) condition -> . IDENTIFIER comp_symbol IDENTIFIER
    (46) condition -> . IDENTIFIER comp_symbol NUMBER
    (47) condition -> . NUMBER comp_symbol IDENTIFIER
    (48) condition -> . NUMBER comp_symbol NUMBER

    IDENTIFIER      shift and go to state 49
    NUMBER          shift and go to state 48

    condition_list                 shift and go to state 102
    condition                      shift and go to state 50

state 78

    (44) comb_symbol -> LOR .

    IDENTIFIER      reduce using rule 44 (comb_symbol -> LOR .)
    NUMBER          reduce using rule 44 (comb_symbol -> LOR .)


state 79

    (43) comb_symbol -> LAND .

    IDENTIFIER      reduce using rule 43 (comb_symbol -> LAND .)
    NUMBER          reduce using rule 43 (comb_symbol -> LAND .)


state 80

    (22) multiple_assignment -> IDENTIFIER EQUALS . multiple_assignment
    (20) assignment -> IDENTIFIER EQUALS . expression
    (21) multiple_assignment -> . assignment
    (22) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . MINUS expression
    (60) expression -> . NUMBER
    (61) expression -> . IDENTIFIER
    (20) assignment -> . IDENTIFIER EQUALS expression

    IDENTIFIER      shift and go to state 103
    MINUS           shift and go to state 56
    NUMBER          shift and go to state 51

    assignment                     shift and go to state 52
    expression                     shift and go to state 55
    multiple_assignment            shift and go to state 53

state 81

    (26) function_call -> IDENTIFIER EQUALS IDENTIFIER LPAREN . parameters_list RPAREN
    (27) parameters_list -> . IDENTIFIER
    (28) parameters_list -> . NUMBER
    (29) parameters_list -> . parameters_list COMMA IDENTIFIER
    (30) parameters_list -> . parameters_list COMMA NUMBER

    IDENTIFIER      shift and go to state 62
    NUMBER          shift and go to state 61

    parameters_list                shift and go to state 104

state 82

    (58) expression -> expression DIVIDE . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . MINUS expression
    (60) expression -> . NUMBER
    (61) expression -> . IDENTIFIER

    MINUS           shift and go to state 56
    NUMBER          shift and go to state 51
    IDENTIFIER      shift and go to state 86

    expression                     shift and go to state 105

state 83

    (57) expression -> expression TIMES . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . MINUS expression
    (60) expression -> . NUMBER
    (61) expression -> . IDENTIFIER

    MINUS           shift and go to state 56
    NUMBER          shift and go to state 51
    IDENTIFIER      shift and go to state 86

    expression                     shift and go to state 106

state 84

    (55) expression -> expression PLUS . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . MINUS expression
    (60) expression -> . NUMBER
    (61) expression -> . IDENTIFIER

    MINUS           shift and go to state 56
    NUMBER          shift and go to state 51
    IDENTIFIER      shift and go to state 86

    expression                     shift and go to state 107

state 85

    (56) expression -> expression MINUS . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . MINUS expression
    (60) expression -> . NUMBER
    (61) expression -> . IDENTIFIER

    MINUS           shift and go to state 56
    NUMBER          shift and go to state 51
    IDENTIFIER      shift and go to state 86

    expression                     shift and go to state 108

state 86

    (61) expression -> IDENTIFIER .

    PLUS            reduce using rule 61 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 61 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 61 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 61 (expression -> IDENTIFIER .)
    NEWLINE         reduce using rule 61 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 61 (expression -> IDENTIFIER .)


state 87

    (59) expression -> MINUS expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 59 (expression -> MINUS expression .)
    MINUS           reduce using rule 59 (expression -> MINUS expression .)
    TIMES           reduce using rule 59 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 59 (expression -> MINUS expression .)
    NEWLINE         reduce using rule 59 (expression -> MINUS expression .)
    COMMA           reduce using rule 59 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 84 ]
  ! MINUS           [ shift and go to state 85 ]
  ! TIMES           [ shift and go to state 83 ]
  ! DIVIDE          [ shift and go to state 82 ]


state 88

    (24) parralel_assignment -> IDENTIFIER COMMA parralel_assignment COMMA . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . MINUS expression
    (60) expression -> . NUMBER
    (61) expression -> . IDENTIFIER

    MINUS           shift and go to state 56
    NUMBER          shift and go to state 51
    IDENTIFIER      shift and go to state 86

    expression                     shift and go to state 109

state 89

    (20) assignment -> IDENTIFIER EQUALS . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . MINUS expression
    (60) expression -> . NUMBER
    (61) expression -> . IDENTIFIER

    MINUS           shift and go to state 56
    NUMBER          shift and go to state 51
    IDENTIFIER      shift and go to state 86

    expression                     shift and go to state 55

state 90

    (25) function_call -> IDENTIFIER LPAREN parameters_list RPAREN .

    NEWLINE         reduce using rule 25 (function_call -> IDENTIFIER LPAREN parameters_list RPAREN .)


state 91

    (29) parameters_list -> parameters_list COMMA . IDENTIFIER
    (30) parameters_list -> parameters_list COMMA . NUMBER

    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 111


state 92

    (33) if_block -> IF LPAREN condition_list RPAREN . LBRACE body RBRACE NEWLINE
    (34) if_block -> IF LPAREN condition_list RPAREN . NEWLINE LBRACE body RBRACE NEWLINE
    (35) if_block -> IF LPAREN condition_list RPAREN . LBRACE NEWLINE body RBRACE NEWLINE
    (36) if_block -> IF LPAREN condition_list RPAREN . NEWLINE LBRACE NEWLINE body RBRACE NEWLINE

    LBRACE          shift and go to state 112
    NEWLINE         shift and go to state 113


state 93

    (39) else_block -> ELSE NEWLINE LBRACE . body RBRACE NEWLINE
    (40) else_block -> ELSE NEWLINE LBRACE . NEWLINE body RBRACE NEWLINE
    (11) body -> . body statement
    (12) body -> . statement
    (13) statement -> . assignment NEWLINE
    (14) statement -> . multiple_assignment NEWLINE
    (15) statement -> . parralel_assignment NEWLINE
    (16) statement -> . if_block
    (17) statement -> . if_block else_block
    (18) statement -> . while_block NEWLINE
    (19) statement -> . function_call NEWLINE
    (20) assignment -> . IDENTIFIER EQUALS expression
    (21) multiple_assignment -> . assignment
    (22) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (23) parralel_assignment -> . assignment
    (24) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (33) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (36) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (32) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (25) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (26) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    NEWLINE         shift and go to state 114
    IDENTIFIER      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 18

    body                           shift and go to state 115
    parralel_assignment            shift and go to state 19
    assignment                     shift and go to state 23
    if_block                       shift and go to state 26
    function_call                  shift and go to state 17
    while_block                    shift and go to state 27
    statement                      shift and go to state 20
    multiple_assignment            shift and go to state 24

state 94

    (38) else_block -> ELSE LBRACE NEWLINE . body RBRACE NEWLINE
    (11) body -> . body statement
    (12) body -> . statement
    (13) statement -> . assignment NEWLINE
    (14) statement -> . multiple_assignment NEWLINE
    (15) statement -> . parralel_assignment NEWLINE
    (16) statement -> . if_block
    (17) statement -> . if_block else_block
    (18) statement -> . while_block NEWLINE
    (19) statement -> . function_call NEWLINE
    (20) assignment -> . IDENTIFIER EQUALS expression
    (21) multiple_assignment -> . assignment
    (22) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (23) parralel_assignment -> . assignment
    (24) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (33) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (36) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (32) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (25) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (26) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    IDENTIFIER      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 18

    body                           shift and go to state 116
    parralel_assignment            shift and go to state 19
    assignment                     shift and go to state 23
    if_block                       shift and go to state 26
    function_call                  shift and go to state 17
    while_block                    shift and go to state 27
    statement                      shift and go to state 20
    multiple_assignment            shift and go to state 24

state 95

    (37) else_block -> ELSE LBRACE body . RBRACE NEWLINE
    (11) body -> body . statement
    (13) statement -> . assignment NEWLINE
    (14) statement -> . multiple_assignment NEWLINE
    (15) statement -> . parralel_assignment NEWLINE
    (16) statement -> . if_block
    (17) statement -> . if_block else_block
    (18) statement -> . while_block NEWLINE
    (19) statement -> . function_call NEWLINE
    (20) assignment -> . IDENTIFIER EQUALS expression
    (21) multiple_assignment -> . assignment
    (22) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (23) parralel_assignment -> . assignment
    (24) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (33) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (36) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (32) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (25) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (26) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    RBRACE          shift and go to state 117
    IDENTIFIER      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 18

    parralel_assignment            shift and go to state 19
    assignment                     shift and go to state 23
    if_block                       shift and go to state 26
    function_call                  shift and go to state 17
    while_block                    shift and go to state 27
    statement                      shift and go to state 37
    multiple_assignment            shift and go to state 24

state 96

    (31) while_block -> WHILE LPAREN condition_list RPAREN LBRACE . NEWLINE body RBRACE

    NEWLINE         shift and go to state 118


state 97

    (32) while_block -> WHILE LPAREN condition_list RPAREN NEWLINE . LBRACE NEWLINE body RBRACE

    LBRACE          shift and go to state 119


state 98

    (47) condition -> NUMBER comp_symbol IDENTIFIER .

    LAND            reduce using rule 47 (condition -> NUMBER comp_symbol IDENTIFIER .)
    LOR             reduce using rule 47 (condition -> NUMBER comp_symbol IDENTIFIER .)
    RPAREN          reduce using rule 47 (condition -> NUMBER comp_symbol IDENTIFIER .)


state 99

    (48) condition -> NUMBER comp_symbol NUMBER .

    LAND            reduce using rule 48 (condition -> NUMBER comp_symbol NUMBER .)
    LOR             reduce using rule 48 (condition -> NUMBER comp_symbol NUMBER .)
    RPAREN          reduce using rule 48 (condition -> NUMBER comp_symbol NUMBER .)


state 100

    (45) condition -> IDENTIFIER comp_symbol IDENTIFIER .

    LAND            reduce using rule 45 (condition -> IDENTIFIER comp_symbol IDENTIFIER .)
    LOR             reduce using rule 45 (condition -> IDENTIFIER comp_symbol IDENTIFIER .)
    RPAREN          reduce using rule 45 (condition -> IDENTIFIER comp_symbol IDENTIFIER .)


state 101

    (46) condition -> IDENTIFIER comp_symbol NUMBER .

    LAND            reduce using rule 46 (condition -> IDENTIFIER comp_symbol NUMBER .)
    LOR             reduce using rule 46 (condition -> IDENTIFIER comp_symbol NUMBER .)
    RPAREN          reduce using rule 46 (condition -> IDENTIFIER comp_symbol NUMBER .)


state 102

    (42) condition_list -> condition comb_symbol condition_list .

    RPAREN          reduce using rule 42 (condition_list -> condition comb_symbol condition_list .)


state 103

    (22) multiple_assignment -> IDENTIFIER . EQUALS multiple_assignment
    (61) expression -> IDENTIFIER .
    (20) assignment -> IDENTIFIER . EQUALS expression

    EQUALS          shift and go to state 80
    PLUS            reduce using rule 61 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 61 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 61 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 61 (expression -> IDENTIFIER .)
    NEWLINE         reduce using rule 61 (expression -> IDENTIFIER .)


state 104

    (26) function_call -> IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list . RPAREN
    (29) parameters_list -> parameters_list . COMMA IDENTIFIER
    (30) parameters_list -> parameters_list . COMMA NUMBER

    RPAREN          shift and go to state 120
    COMMA           shift and go to state 91


state 105

    (58) expression -> expression DIVIDE expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 58 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 58 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 58 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 58 (expression -> expression DIVIDE expression .)
    NEWLINE         reduce using rule 58 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 58 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 84 ]
  ! MINUS           [ shift and go to state 85 ]
  ! TIMES           [ shift and go to state 83 ]
  ! DIVIDE          [ shift and go to state 82 ]


state 106

    (57) expression -> expression TIMES expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 57 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 57 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 57 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 57 (expression -> expression TIMES expression .)
    NEWLINE         reduce using rule 57 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 57 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 84 ]
  ! MINUS           [ shift and go to state 85 ]
  ! TIMES           [ shift and go to state 83 ]
  ! DIVIDE          [ shift and go to state 82 ]


state 107

    (55) expression -> expression PLUS expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 55 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 55 (expression -> expression PLUS expression .)
    NEWLINE         reduce using rule 55 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 55 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 82

  ! TIMES           [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 84 ]
  ! MINUS           [ shift and go to state 85 ]


state 108

    (56) expression -> expression MINUS expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 56 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 56 (expression -> expression MINUS expression .)
    NEWLINE         reduce using rule 56 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 56 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 82

  ! TIMES           [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 84 ]
  ! MINUS           [ shift and go to state 85 ]


state 109

    (24) parralel_assignment -> IDENTIFIER COMMA parralel_assignment COMMA expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression

    NEWLINE         reduce using rule 24 (parralel_assignment -> IDENTIFIER COMMA parralel_assignment COMMA expression .)
    COMMA           reduce using rule 24 (parralel_assignment -> IDENTIFIER COMMA parralel_assignment COMMA expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 82


state 110

    (29) parameters_list -> parameters_list COMMA IDENTIFIER .

    RPAREN          reduce using rule 29 (parameters_list -> parameters_list COMMA IDENTIFIER .)
    COMMA           reduce using rule 29 (parameters_list -> parameters_list COMMA IDENTIFIER .)


state 111

    (30) parameters_list -> parameters_list COMMA NUMBER .

    RPAREN          reduce using rule 30 (parameters_list -> parameters_list COMMA NUMBER .)
    COMMA           reduce using rule 30 (parameters_list -> parameters_list COMMA NUMBER .)


state 112

    (33) if_block -> IF LPAREN condition_list RPAREN LBRACE . body RBRACE NEWLINE
    (35) if_block -> IF LPAREN condition_list RPAREN LBRACE . NEWLINE body RBRACE NEWLINE
    (11) body -> . body statement
    (12) body -> . statement
    (13) statement -> . assignment NEWLINE
    (14) statement -> . multiple_assignment NEWLINE
    (15) statement -> . parralel_assignment NEWLINE
    (16) statement -> . if_block
    (17) statement -> . if_block else_block
    (18) statement -> . while_block NEWLINE
    (19) statement -> . function_call NEWLINE
    (20) assignment -> . IDENTIFIER EQUALS expression
    (21) multiple_assignment -> . assignment
    (22) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (23) parralel_assignment -> . assignment
    (24) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (33) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (36) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (32) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (25) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (26) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    NEWLINE         shift and go to state 121
    IDENTIFIER      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 18

    body                           shift and go to state 122
    parralel_assignment            shift and go to state 19
    assignment                     shift and go to state 23
    if_block                       shift and go to state 26
    function_call                  shift and go to state 17
    while_block                    shift and go to state 27
    statement                      shift and go to state 20
    multiple_assignment            shift and go to state 24

state 113

    (34) if_block -> IF LPAREN condition_list RPAREN NEWLINE . LBRACE body RBRACE NEWLINE
    (36) if_block -> IF LPAREN condition_list RPAREN NEWLINE . LBRACE NEWLINE body RBRACE NEWLINE

    LBRACE          shift and go to state 123


state 114

    (40) else_block -> ELSE NEWLINE LBRACE NEWLINE . body RBRACE NEWLINE
    (11) body -> . body statement
    (12) body -> . statement
    (13) statement -> . assignment NEWLINE
    (14) statement -> . multiple_assignment NEWLINE
    (15) statement -> . parralel_assignment NEWLINE
    (16) statement -> . if_block
    (17) statement -> . if_block else_block
    (18) statement -> . while_block NEWLINE
    (19) statement -> . function_call NEWLINE
    (20) assignment -> . IDENTIFIER EQUALS expression
    (21) multiple_assignment -> . assignment
    (22) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (23) parralel_assignment -> . assignment
    (24) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (33) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (36) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (32) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (25) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (26) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    IDENTIFIER      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 18

    body                           shift and go to state 124
    parralel_assignment            shift and go to state 19
    assignment                     shift and go to state 23
    if_block                       shift and go to state 26
    function_call                  shift and go to state 17
    while_block                    shift and go to state 27
    statement                      shift and go to state 20
    multiple_assignment            shift and go to state 24

state 115

    (39) else_block -> ELSE NEWLINE LBRACE body . RBRACE NEWLINE
    (11) body -> body . statement
    (13) statement -> . assignment NEWLINE
    (14) statement -> . multiple_assignment NEWLINE
    (15) statement -> . parralel_assignment NEWLINE
    (16) statement -> . if_block
    (17) statement -> . if_block else_block
    (18) statement -> . while_block NEWLINE
    (19) statement -> . function_call NEWLINE
    (20) assignment -> . IDENTIFIER EQUALS expression
    (21) multiple_assignment -> . assignment
    (22) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (23) parralel_assignment -> . assignment
    (24) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (33) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (36) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (32) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (25) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (26) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    RBRACE          shift and go to state 125
    IDENTIFIER      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 18

    parralel_assignment            shift and go to state 19
    assignment                     shift and go to state 23
    if_block                       shift and go to state 26
    function_call                  shift and go to state 17
    while_block                    shift and go to state 27
    statement                      shift and go to state 37
    multiple_assignment            shift and go to state 24

state 116

    (38) else_block -> ELSE LBRACE NEWLINE body . RBRACE NEWLINE
    (11) body -> body . statement
    (13) statement -> . assignment NEWLINE
    (14) statement -> . multiple_assignment NEWLINE
    (15) statement -> . parralel_assignment NEWLINE
    (16) statement -> . if_block
    (17) statement -> . if_block else_block
    (18) statement -> . while_block NEWLINE
    (19) statement -> . function_call NEWLINE
    (20) assignment -> . IDENTIFIER EQUALS expression
    (21) multiple_assignment -> . assignment
    (22) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (23) parralel_assignment -> . assignment
    (24) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (33) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (36) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (32) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (25) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (26) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    RBRACE          shift and go to state 126
    IDENTIFIER      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 18

    parralel_assignment            shift and go to state 19
    assignment                     shift and go to state 23
    if_block                       shift and go to state 26
    function_call                  shift and go to state 17
    while_block                    shift and go to state 27
    statement                      shift and go to state 37
    multiple_assignment            shift and go to state 24

state 117

    (37) else_block -> ELSE LBRACE body RBRACE . NEWLINE

    NEWLINE         shift and go to state 127


state 118

    (31) while_block -> WHILE LPAREN condition_list RPAREN LBRACE NEWLINE . body RBRACE
    (11) body -> . body statement
    (12) body -> . statement
    (13) statement -> . assignment NEWLINE
    (14) statement -> . multiple_assignment NEWLINE
    (15) statement -> . parralel_assignment NEWLINE
    (16) statement -> . if_block
    (17) statement -> . if_block else_block
    (18) statement -> . while_block NEWLINE
    (19) statement -> . function_call NEWLINE
    (20) assignment -> . IDENTIFIER EQUALS expression
    (21) multiple_assignment -> . assignment
    (22) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (23) parralel_assignment -> . assignment
    (24) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (33) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (36) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (32) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (25) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (26) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    IDENTIFIER      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 18

    body                           shift and go to state 128
    parralel_assignment            shift and go to state 19
    assignment                     shift and go to state 23
    if_block                       shift and go to state 26
    function_call                  shift and go to state 17
    while_block                    shift and go to state 27
    statement                      shift and go to state 20
    multiple_assignment            shift and go to state 24

state 119

    (32) while_block -> WHILE LPAREN condition_list RPAREN NEWLINE LBRACE . NEWLINE body RBRACE

    NEWLINE         shift and go to state 129


state 120

    (26) function_call -> IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN .

    NEWLINE         reduce using rule 26 (function_call -> IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN .)


state 121

    (35) if_block -> IF LPAREN condition_list RPAREN LBRACE NEWLINE . body RBRACE NEWLINE
    (11) body -> . body statement
    (12) body -> . statement
    (13) statement -> . assignment NEWLINE
    (14) statement -> . multiple_assignment NEWLINE
    (15) statement -> . parralel_assignment NEWLINE
    (16) statement -> . if_block
    (17) statement -> . if_block else_block
    (18) statement -> . while_block NEWLINE
    (19) statement -> . function_call NEWLINE
    (20) assignment -> . IDENTIFIER EQUALS expression
    (21) multiple_assignment -> . assignment
    (22) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (23) parralel_assignment -> . assignment
    (24) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (33) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (36) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (32) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (25) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (26) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    IDENTIFIER      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 18

    body                           shift and go to state 130
    parralel_assignment            shift and go to state 19
    assignment                     shift and go to state 23
    if_block                       shift and go to state 26
    function_call                  shift and go to state 17
    while_block                    shift and go to state 27
    statement                      shift and go to state 20
    multiple_assignment            shift and go to state 24

state 122

    (33) if_block -> IF LPAREN condition_list RPAREN LBRACE body . RBRACE NEWLINE
    (11) body -> body . statement
    (13) statement -> . assignment NEWLINE
    (14) statement -> . multiple_assignment NEWLINE
    (15) statement -> . parralel_assignment NEWLINE
    (16) statement -> . if_block
    (17) statement -> . if_block else_block
    (18) statement -> . while_block NEWLINE
    (19) statement -> . function_call NEWLINE
    (20) assignment -> . IDENTIFIER EQUALS expression
    (21) multiple_assignment -> . assignment
    (22) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (23) parralel_assignment -> . assignment
    (24) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (33) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (36) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (32) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (25) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (26) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    RBRACE          shift and go to state 131
    IDENTIFIER      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 18

    parralel_assignment            shift and go to state 19
    assignment                     shift and go to state 23
    if_block                       shift and go to state 26
    function_call                  shift and go to state 17
    while_block                    shift and go to state 27
    statement                      shift and go to state 37
    multiple_assignment            shift and go to state 24

state 123

    (34) if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE . body RBRACE NEWLINE
    (36) if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE . NEWLINE body RBRACE NEWLINE
    (11) body -> . body statement
    (12) body -> . statement
    (13) statement -> . assignment NEWLINE
    (14) statement -> . multiple_assignment NEWLINE
    (15) statement -> . parralel_assignment NEWLINE
    (16) statement -> . if_block
    (17) statement -> . if_block else_block
    (18) statement -> . while_block NEWLINE
    (19) statement -> . function_call NEWLINE
    (20) assignment -> . IDENTIFIER EQUALS expression
    (21) multiple_assignment -> . assignment
    (22) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (23) parralel_assignment -> . assignment
    (24) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (33) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (36) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (32) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (25) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (26) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    NEWLINE         shift and go to state 132
    IDENTIFIER      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 18

    body                           shift and go to state 133
    parralel_assignment            shift and go to state 19
    assignment                     shift and go to state 23
    if_block                       shift and go to state 26
    function_call                  shift and go to state 17
    while_block                    shift and go to state 27
    statement                      shift and go to state 20
    multiple_assignment            shift and go to state 24

state 124

    (40) else_block -> ELSE NEWLINE LBRACE NEWLINE body . RBRACE NEWLINE
    (11) body -> body . statement
    (13) statement -> . assignment NEWLINE
    (14) statement -> . multiple_assignment NEWLINE
    (15) statement -> . parralel_assignment NEWLINE
    (16) statement -> . if_block
    (17) statement -> . if_block else_block
    (18) statement -> . while_block NEWLINE
    (19) statement -> . function_call NEWLINE
    (20) assignment -> . IDENTIFIER EQUALS expression
    (21) multiple_assignment -> . assignment
    (22) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (23) parralel_assignment -> . assignment
    (24) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (33) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (36) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (32) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (25) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (26) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    RBRACE          shift and go to state 134
    IDENTIFIER      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 18

    parralel_assignment            shift and go to state 19
    assignment                     shift and go to state 23
    if_block                       shift and go to state 26
    function_call                  shift and go to state 17
    while_block                    shift and go to state 27
    statement                      shift and go to state 37
    multiple_assignment            shift and go to state 24

state 125

    (39) else_block -> ELSE NEWLINE LBRACE body RBRACE . NEWLINE

    NEWLINE         shift and go to state 135


state 126

    (38) else_block -> ELSE LBRACE NEWLINE body RBRACE . NEWLINE

    NEWLINE         shift and go to state 136


state 127

    (37) else_block -> ELSE LBRACE body RBRACE NEWLINE .

    RBRACE          reduce using rule 37 (else_block -> ELSE LBRACE body RBRACE NEWLINE .)
    IDENTIFIER      reduce using rule 37 (else_block -> ELSE LBRACE body RBRACE NEWLINE .)
    IF              reduce using rule 37 (else_block -> ELSE LBRACE body RBRACE NEWLINE .)
    WHILE           reduce using rule 37 (else_block -> ELSE LBRACE body RBRACE NEWLINE .)


state 128

    (31) while_block -> WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body . RBRACE
    (11) body -> body . statement
    (13) statement -> . assignment NEWLINE
    (14) statement -> . multiple_assignment NEWLINE
    (15) statement -> . parralel_assignment NEWLINE
    (16) statement -> . if_block
    (17) statement -> . if_block else_block
    (18) statement -> . while_block NEWLINE
    (19) statement -> . function_call NEWLINE
    (20) assignment -> . IDENTIFIER EQUALS expression
    (21) multiple_assignment -> . assignment
    (22) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (23) parralel_assignment -> . assignment
    (24) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (33) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (36) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (32) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (25) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (26) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    RBRACE          shift and go to state 137
    IDENTIFIER      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 18

    parralel_assignment            shift and go to state 19
    assignment                     shift and go to state 23
    if_block                       shift and go to state 26
    function_call                  shift and go to state 17
    while_block                    shift and go to state 27
    statement                      shift and go to state 37
    multiple_assignment            shift and go to state 24

state 129

    (32) while_block -> WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE . body RBRACE
    (11) body -> . body statement
    (12) body -> . statement
    (13) statement -> . assignment NEWLINE
    (14) statement -> . multiple_assignment NEWLINE
    (15) statement -> . parralel_assignment NEWLINE
    (16) statement -> . if_block
    (17) statement -> . if_block else_block
    (18) statement -> . while_block NEWLINE
    (19) statement -> . function_call NEWLINE
    (20) assignment -> . IDENTIFIER EQUALS expression
    (21) multiple_assignment -> . assignment
    (22) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (23) parralel_assignment -> . assignment
    (24) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (33) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (36) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (32) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (25) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (26) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    IDENTIFIER      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 18

    body                           shift and go to state 138
    parralel_assignment            shift and go to state 19
    assignment                     shift and go to state 23
    if_block                       shift and go to state 26
    function_call                  shift and go to state 17
    while_block                    shift and go to state 27
    statement                      shift and go to state 20
    multiple_assignment            shift and go to state 24

state 130

    (35) if_block -> IF LPAREN condition_list RPAREN LBRACE NEWLINE body . RBRACE NEWLINE
    (11) body -> body . statement
    (13) statement -> . assignment NEWLINE
    (14) statement -> . multiple_assignment NEWLINE
    (15) statement -> . parralel_assignment NEWLINE
    (16) statement -> . if_block
    (17) statement -> . if_block else_block
    (18) statement -> . while_block NEWLINE
    (19) statement -> . function_call NEWLINE
    (20) assignment -> . IDENTIFIER EQUALS expression
    (21) multiple_assignment -> . assignment
    (22) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (23) parralel_assignment -> . assignment
    (24) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (33) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (36) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (32) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (25) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (26) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    RBRACE          shift and go to state 139
    IDENTIFIER      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 18

    parralel_assignment            shift and go to state 19
    assignment                     shift and go to state 23
    if_block                       shift and go to state 26
    function_call                  shift and go to state 17
    while_block                    shift and go to state 27
    statement                      shift and go to state 37
    multiple_assignment            shift and go to state 24

state 131

    (33) if_block -> IF LPAREN condition_list RPAREN LBRACE body RBRACE . NEWLINE

    NEWLINE         shift and go to state 140


state 132

    (36) if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE . body RBRACE NEWLINE
    (11) body -> . body statement
    (12) body -> . statement
    (13) statement -> . assignment NEWLINE
    (14) statement -> . multiple_assignment NEWLINE
    (15) statement -> . parralel_assignment NEWLINE
    (16) statement -> . if_block
    (17) statement -> . if_block else_block
    (18) statement -> . while_block NEWLINE
    (19) statement -> . function_call NEWLINE
    (20) assignment -> . IDENTIFIER EQUALS expression
    (21) multiple_assignment -> . assignment
    (22) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (23) parralel_assignment -> . assignment
    (24) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (33) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (36) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (32) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (25) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (26) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    IDENTIFIER      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 18

    body                           shift and go to state 141
    parralel_assignment            shift and go to state 19
    assignment                     shift and go to state 23
    if_block                       shift and go to state 26
    function_call                  shift and go to state 17
    while_block                    shift and go to state 27
    statement                      shift and go to state 20
    multiple_assignment            shift and go to state 24

state 133

    (34) if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE body . RBRACE NEWLINE
    (11) body -> body . statement
    (13) statement -> . assignment NEWLINE
    (14) statement -> . multiple_assignment NEWLINE
    (15) statement -> . parralel_assignment NEWLINE
    (16) statement -> . if_block
    (17) statement -> . if_block else_block
    (18) statement -> . while_block NEWLINE
    (19) statement -> . function_call NEWLINE
    (20) assignment -> . IDENTIFIER EQUALS expression
    (21) multiple_assignment -> . assignment
    (22) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (23) parralel_assignment -> . assignment
    (24) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (33) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (36) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (32) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (25) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (26) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    RBRACE          shift and go to state 142
    IDENTIFIER      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 18

    parralel_assignment            shift and go to state 19
    assignment                     shift and go to state 23
    if_block                       shift and go to state 26
    function_call                  shift and go to state 17
    while_block                    shift and go to state 27
    statement                      shift and go to state 37
    multiple_assignment            shift and go to state 24

state 134

    (40) else_block -> ELSE NEWLINE LBRACE NEWLINE body RBRACE . NEWLINE

    NEWLINE         shift and go to state 143


state 135

    (39) else_block -> ELSE NEWLINE LBRACE body RBRACE NEWLINE .

    RBRACE          reduce using rule 39 (else_block -> ELSE NEWLINE LBRACE body RBRACE NEWLINE .)
    IDENTIFIER      reduce using rule 39 (else_block -> ELSE NEWLINE LBRACE body RBRACE NEWLINE .)
    IF              reduce using rule 39 (else_block -> ELSE NEWLINE LBRACE body RBRACE NEWLINE .)
    WHILE           reduce using rule 39 (else_block -> ELSE NEWLINE LBRACE body RBRACE NEWLINE .)


state 136

    (38) else_block -> ELSE LBRACE NEWLINE body RBRACE NEWLINE .

    RBRACE          reduce using rule 38 (else_block -> ELSE LBRACE NEWLINE body RBRACE NEWLINE .)
    IDENTIFIER      reduce using rule 38 (else_block -> ELSE LBRACE NEWLINE body RBRACE NEWLINE .)
    IF              reduce using rule 38 (else_block -> ELSE LBRACE NEWLINE body RBRACE NEWLINE .)
    WHILE           reduce using rule 38 (else_block -> ELSE LBRACE NEWLINE body RBRACE NEWLINE .)


state 137

    (31) while_block -> WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE .

    NEWLINE         reduce using rule 31 (while_block -> WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE .)


state 138

    (32) while_block -> WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body . RBRACE
    (11) body -> body . statement
    (13) statement -> . assignment NEWLINE
    (14) statement -> . multiple_assignment NEWLINE
    (15) statement -> . parralel_assignment NEWLINE
    (16) statement -> . if_block
    (17) statement -> . if_block else_block
    (18) statement -> . while_block NEWLINE
    (19) statement -> . function_call NEWLINE
    (20) assignment -> . IDENTIFIER EQUALS expression
    (21) multiple_assignment -> . assignment
    (22) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (23) parralel_assignment -> . assignment
    (24) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (33) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (36) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (32) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (25) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (26) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    RBRACE          shift and go to state 144
    IDENTIFIER      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 18

    parralel_assignment            shift and go to state 19
    assignment                     shift and go to state 23
    if_block                       shift and go to state 26
    function_call                  shift and go to state 17
    while_block                    shift and go to state 27
    statement                      shift and go to state 37
    multiple_assignment            shift and go to state 24

state 139

    (35) if_block -> IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE . NEWLINE

    NEWLINE         shift and go to state 145


state 140

    (33) if_block -> IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE .

    ELSE            reduce using rule 33 (if_block -> IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE .)
    RBRACE          reduce using rule 33 (if_block -> IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE .)
    IDENTIFIER      reduce using rule 33 (if_block -> IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE .)
    IF              reduce using rule 33 (if_block -> IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE .)
    WHILE           reduce using rule 33 (if_block -> IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE .)


state 141

    (36) if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body . RBRACE NEWLINE
    (11) body -> body . statement
    (13) statement -> . assignment NEWLINE
    (14) statement -> . multiple_assignment NEWLINE
    (15) statement -> . parralel_assignment NEWLINE
    (16) statement -> . if_block
    (17) statement -> . if_block else_block
    (18) statement -> . while_block NEWLINE
    (19) statement -> . function_call NEWLINE
    (20) assignment -> . IDENTIFIER EQUALS expression
    (21) multiple_assignment -> . assignment
    (22) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (23) parralel_assignment -> . assignment
    (24) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (33) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (36) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (32) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (25) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (26) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    RBRACE          shift and go to state 146
    IDENTIFIER      shift and go to state 21
    IF              shift and go to state 25
    WHILE           shift and go to state 18

    parralel_assignment            shift and go to state 19
    assignment                     shift and go to state 23
    if_block                       shift and go to state 26
    function_call                  shift and go to state 17
    while_block                    shift and go to state 27
    statement                      shift and go to state 37
    multiple_assignment            shift and go to state 24

state 142

    (34) if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE . NEWLINE

    NEWLINE         shift and go to state 147


state 143

    (40) else_block -> ELSE NEWLINE LBRACE NEWLINE body RBRACE NEWLINE .

    RBRACE          reduce using rule 40 (else_block -> ELSE NEWLINE LBRACE NEWLINE body RBRACE NEWLINE .)
    IDENTIFIER      reduce using rule 40 (else_block -> ELSE NEWLINE LBRACE NEWLINE body RBRACE NEWLINE .)
    IF              reduce using rule 40 (else_block -> ELSE NEWLINE LBRACE NEWLINE body RBRACE NEWLINE .)
    WHILE           reduce using rule 40 (else_block -> ELSE NEWLINE LBRACE NEWLINE body RBRACE NEWLINE .)


state 144

    (32) while_block -> WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE .

    NEWLINE         reduce using rule 32 (while_block -> WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE .)


state 145

    (35) if_block -> IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE .

    ELSE            reduce using rule 35 (if_block -> IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE .)
    RBRACE          reduce using rule 35 (if_block -> IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE .)
    IDENTIFIER      reduce using rule 35 (if_block -> IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE .)
    IF              reduce using rule 35 (if_block -> IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE .)
    WHILE           reduce using rule 35 (if_block -> IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE .)


state 146

    (36) if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE . NEWLINE

    NEWLINE         shift and go to state 148


state 147

    (34) if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE .

    ELSE            reduce using rule 34 (if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE .)
    RBRACE          reduce using rule 34 (if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE .)
    IDENTIFIER      reduce using rule 34 (if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE .)
    IF              reduce using rule 34 (if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE .)
    WHILE           reduce using rule 34 (if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE .)


state 148

    (36) if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE .

    ELSE            reduce using rule 36 (if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE .)
    RBRACE          reduce using rule 36 (if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE .)
    IDENTIFIER      reduce using rule 36 (if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE .)
    IF              reduce using rule 36 (if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE .)
    WHILE           reduce using rule 36 (if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 23 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 23 resolved as shift
