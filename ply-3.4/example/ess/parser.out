Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    LNOT
    RSHIFT
    VOID
    UMINUS
    DIVEQUAL
    LSHIFT
    COLON
    MODEQUAL
    OUT
    XOR
    PLUSPLUS
    PERIOD
    PLUSEQUAL
    MINUSMINUS
    AND
    LBRACKET
    MINUSEQUAL
    BREAK
    CONTINUE
    NOT
    RBRACKET
    TIMESEQUAL
    OR
    MOD

Grammar

Rule 0     S' -> program
Rule 1     program -> program function_definition
Rule 2     program -> function_definition
Rule 3     function_definition -> head NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
Rule 4     function_definition -> head LBRACE NEWLINE body RBRACE NEWLINE
Rule 5     head -> IDENTIFIER LPAREN argument_list RPAREN
Rule 6     argument_list -> argument_declaration
Rule 7     argument_list -> argument_declaration COMMA argument_list
Rule 8     argument_declaration -> IDENTIFIER
Rule 9     argument_declaration -> NUMBER
Rule 10    body -> body statement
Rule 11    body -> statement
Rule 12    statement -> assignment NEWLINE
Rule 13    statement -> multiple_assignment NEWLINE
Rule 14    statement -> parralel_assignment NEWLINE
Rule 15    statement -> if_block
Rule 16    statement -> if_block else_block
Rule 17    statement -> while_block NEWLINE
Rule 18    statement -> function_call NEWLINE
Rule 19    assignment -> IDENTIFIER EQUALS expression
Rule 20    multiple_assignment -> assignment
Rule 21    multiple_assignment -> IDENTIFIER EQUALS multiple_assignment
Rule 22    parralel_assignment -> assignment
Rule 23    parralel_assignment -> IDENTIFIER COMMA parralel_assignment COMMA expression
Rule 24    function_call -> IDENTIFIER LPAREN parameters_list RPAREN
Rule 25    function_call -> IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN
Rule 26    parameters_list -> IDENTIFIER
Rule 27    parameters_list -> NUMBER
Rule 28    parameters_list -> parameters_list COMMA IDENTIFIER
Rule 29    parameters_list -> parameters_list COMMA NUMBER
Rule 30    while_block -> WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
Rule 31    while_block -> WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
Rule 32    if_block -> IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
Rule 33    if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
Rule 34    if_block -> IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
Rule 35    if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
Rule 36    else_block -> ELSE LBRACE body RBRACE NEWLINE
Rule 37    else_block -> ELSE LBRACE NEWLINE body RBRACE NEWLINE
Rule 38    else_block -> ELSE NEWLINE LBRACE body RBRACE NEWLINE
Rule 39    else_block -> ELSE NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
Rule 40    condition_list -> condition
Rule 41    condition_list -> condition comb_symbol condition_list
Rule 42    comb_symbol -> LAND
Rule 43    comb_symbol -> LOR
Rule 44    condition -> IDENTIFIER comp_symbol IDENTIFIER
Rule 45    condition -> IDENTIFIER comp_symbol NUMBER
Rule 46    condition -> NUMBER comp_symbol IDENTIFIER
Rule 47    condition -> NUMBER comp_symbol NUMBER
Rule 48    comp_symbol -> LT
Rule 49    comp_symbol -> GT
Rule 50    comp_symbol -> LE
Rule 51    comp_symbol -> GE
Rule 52    comp_symbol -> EQ
Rule 53    comp_symbol -> NE
Rule 54    expression -> expression PLUS expression
Rule 55    expression -> expression MINUS expression
Rule 56    expression -> expression TIMES expression
Rule 57    expression -> expression DIVIDE expression
Rule 58    expression -> MINUS expression
Rule 59    expression -> NUMBER
Rule 60    expression -> IDENTIFIER

Terminals, with rules where they appear

AND                  : 
BREAK                : 
COLON                : 
COMMA                : 7 23 23 28 29
CONTINUE             : 
DIVEQUAL             : 
DIVIDE               : 57
ELSE                 : 36 37 38 39
EQ                   : 52
EQUALS               : 19 21 25
GE                   : 51
GT                   : 49
IDENTIFIER           : 5 8 19 21 23 24 25 25 26 28 44 44 45 46 60
IF                   : 32 33 34 35
LAND                 : 42
LBRACE               : 3 4 30 31 32 33 34 35 36 37 38 39
LBRACKET             : 
LE                   : 50
LNOT                 : 
LOR                  : 43
LPAREN               : 5 24 25 30 31 32 33 34 35
LSHIFT               : 
LT                   : 48
MINUS                : 55 58
MINUSEQUAL           : 
MINUSMINUS           : 
MOD                  : 
MODEQUAL             : 
NE                   : 53
NEWLINE              : 3 3 3 4 4 12 13 14 17 18 30 31 31 32 33 33 34 34 35 35 35 36 37 37 38 38 39 39 39
NOT                  : 
NUMBER               : 9 27 29 45 46 47 47 59
OR                   : 
OUT                  : 
PERIOD               : 
PLUS                 : 54
PLUSEQUAL            : 
PLUSPLUS             : 
RBRACE               : 3 4 30 31 32 33 34 35 36 37 38 39
RBRACKET             : 
RPAREN               : 5 24 25 30 31 32 33 34 35
RSHIFT               : 
TIMES                : 56
TIMESEQUAL           : 
UMINUS               : 
VOID                 : 
WHILE                : 30 31
XOR                  : 
error                : 

Nonterminals, with rules where they appear

argument_declaration : 6 7
argument_list        : 5 7
assignment           : 12 20 22
body                 : 3 4 10 30 31 32 33 34 35 36 37 38 39
comb_symbol          : 41
comp_symbol          : 44 45 46 47
condition            : 40 41
condition_list       : 30 31 32 33 34 35 41
else_block           : 16
expression           : 19 23 54 54 55 55 56 56 57 57 58
function_call        : 18
function_definition  : 1 2
head                 : 3 4
if_block             : 15 16
multiple_assignment  : 13 21
parameters_list      : 24 25 28 29
parralel_assignment  : 14 23
program              : 1 0
statement            : 10 11
while_block          : 17

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program function_definition
    (2) program -> . function_definition
    (3) function_definition -> . head NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (4) function_definition -> . head LBRACE NEWLINE body RBRACE NEWLINE
    (5) head -> . IDENTIFIER LPAREN argument_list RPAREN

    IDENTIFIER      shift and go to state 4

    head                           shift and go to state 1
    program                        shift and go to state 3
    function_definition            shift and go to state 2

state 1

    (3) function_definition -> head . NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (4) function_definition -> head . LBRACE NEWLINE body RBRACE NEWLINE

    NEWLINE         shift and go to state 5
    LBRACE          shift and go to state 6


state 2

    (2) program -> function_definition .

    IDENTIFIER      reduce using rule 2 (program -> function_definition .)
    $end            reduce using rule 2 (program -> function_definition .)


state 3

    (0) S' -> program .
    (1) program -> program . function_definition
    (3) function_definition -> . head NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (4) function_definition -> . head LBRACE NEWLINE body RBRACE NEWLINE
    (5) head -> . IDENTIFIER LPAREN argument_list RPAREN

    IDENTIFIER      shift and go to state 4

    head                           shift and go to state 1
    function_definition            shift and go to state 7

state 4

    (5) head -> IDENTIFIER . LPAREN argument_list RPAREN

    LPAREN          shift and go to state 8


state 5

    (3) function_definition -> head NEWLINE . LBRACE NEWLINE body RBRACE NEWLINE

    LBRACE          shift and go to state 9


state 6

    (4) function_definition -> head LBRACE . NEWLINE body RBRACE NEWLINE

    NEWLINE         shift and go to state 10


state 7

    (1) program -> program function_definition .

    IDENTIFIER      reduce using rule 1 (program -> program function_definition .)
    $end            reduce using rule 1 (program -> program function_definition .)


state 8

    (5) head -> IDENTIFIER LPAREN . argument_list RPAREN
    (6) argument_list -> . argument_declaration
    (7) argument_list -> . argument_declaration COMMA argument_list
    (8) argument_declaration -> . IDENTIFIER
    (9) argument_declaration -> . NUMBER

    IDENTIFIER      shift and go to state 14
    NUMBER          shift and go to state 11

    argument_declaration           shift and go to state 13
    argument_list                  shift and go to state 12

state 9

    (3) function_definition -> head NEWLINE LBRACE . NEWLINE body RBRACE NEWLINE

    NEWLINE         shift and go to state 15


state 10

    (4) function_definition -> head LBRACE NEWLINE . body RBRACE NEWLINE
    (10) body -> . body statement
    (11) body -> . statement
    (12) statement -> . assignment NEWLINE
    (13) statement -> . multiple_assignment NEWLINE
    (14) statement -> . parralel_assignment NEWLINE
    (15) statement -> . if_block
    (16) statement -> . if_block else_block
    (17) statement -> . while_block NEWLINE
    (18) statement -> . function_call NEWLINE
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) multiple_assignment -> . assignment
    (21) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (22) parralel_assignment -> . assignment
    (23) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (32) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (33) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (30) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (24) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (25) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 24
    WHILE           shift and go to state 17

    body                           shift and go to state 21
    parralel_assignment            shift and go to state 18
    assignment                     shift and go to state 22
    if_block                       shift and go to state 25
    function_call                  shift and go to state 16
    while_block                    shift and go to state 26
    statement                      shift and go to state 19
    multiple_assignment            shift and go to state 23

state 11

    (9) argument_declaration -> NUMBER .

    COMMA           reduce using rule 9 (argument_declaration -> NUMBER .)
    RPAREN          reduce using rule 9 (argument_declaration -> NUMBER .)


state 12

    (5) head -> IDENTIFIER LPAREN argument_list . RPAREN

    RPAREN          shift and go to state 27


state 13

    (6) argument_list -> argument_declaration .
    (7) argument_list -> argument_declaration . COMMA argument_list

    RPAREN          reduce using rule 6 (argument_list -> argument_declaration .)
    COMMA           shift and go to state 28


state 14

    (8) argument_declaration -> IDENTIFIER .

    COMMA           reduce using rule 8 (argument_declaration -> IDENTIFIER .)
    RPAREN          reduce using rule 8 (argument_declaration -> IDENTIFIER .)


state 15

    (3) function_definition -> head NEWLINE LBRACE NEWLINE . body RBRACE NEWLINE
    (10) body -> . body statement
    (11) body -> . statement
    (12) statement -> . assignment NEWLINE
    (13) statement -> . multiple_assignment NEWLINE
    (14) statement -> . parralel_assignment NEWLINE
    (15) statement -> . if_block
    (16) statement -> . if_block else_block
    (17) statement -> . while_block NEWLINE
    (18) statement -> . function_call NEWLINE
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) multiple_assignment -> . assignment
    (21) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (22) parralel_assignment -> . assignment
    (23) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (32) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (33) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (30) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (24) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (25) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 24
    WHILE           shift and go to state 17

    body                           shift and go to state 29
    parralel_assignment            shift and go to state 18
    assignment                     shift and go to state 22
    if_block                       shift and go to state 25
    function_call                  shift and go to state 16
    while_block                    shift and go to state 26
    statement                      shift and go to state 19
    multiple_assignment            shift and go to state 23

state 16

    (18) statement -> function_call . NEWLINE

    NEWLINE         shift and go to state 30


state 17

    (30) while_block -> WHILE . LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (31) while_block -> WHILE . LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE

    LPAREN          shift and go to state 31


state 18

    (14) statement -> parralel_assignment . NEWLINE

    NEWLINE         shift and go to state 32


state 19

    (11) body -> statement .

    RBRACE          reduce using rule 11 (body -> statement .)
    IDENTIFIER      reduce using rule 11 (body -> statement .)
    IF              reduce using rule 11 (body -> statement .)
    WHILE           reduce using rule 11 (body -> statement .)


state 20

    (19) assignment -> IDENTIFIER . EQUALS expression
    (21) multiple_assignment -> IDENTIFIER . EQUALS multiple_assignment
    (23) parralel_assignment -> IDENTIFIER . COMMA parralel_assignment COMMA expression
    (24) function_call -> IDENTIFIER . LPAREN parameters_list RPAREN
    (25) function_call -> IDENTIFIER . EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    EQUALS          shift and go to state 33
    COMMA           shift and go to state 34
    LPAREN          shift and go to state 35


state 21

    (4) function_definition -> head LBRACE NEWLINE body . RBRACE NEWLINE
    (10) body -> body . statement
    (12) statement -> . assignment NEWLINE
    (13) statement -> . multiple_assignment NEWLINE
    (14) statement -> . parralel_assignment NEWLINE
    (15) statement -> . if_block
    (16) statement -> . if_block else_block
    (17) statement -> . while_block NEWLINE
    (18) statement -> . function_call NEWLINE
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) multiple_assignment -> . assignment
    (21) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (22) parralel_assignment -> . assignment
    (23) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (32) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (33) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (30) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (24) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (25) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    RBRACE          shift and go to state 37
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 24
    WHILE           shift and go to state 17

    parralel_assignment            shift and go to state 18
    assignment                     shift and go to state 22
    if_block                       shift and go to state 25
    function_call                  shift and go to state 16
    while_block                    shift and go to state 26
    statement                      shift and go to state 36
    multiple_assignment            shift and go to state 23

state 22

    (12) statement -> assignment . NEWLINE
    (20) multiple_assignment -> assignment .
    (22) parralel_assignment -> assignment .

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 38

  ! NEWLINE         [ reduce using rule 20 (multiple_assignment -> assignment .) ]
  ! NEWLINE         [ reduce using rule 22 (parralel_assignment -> assignment .) ]


state 23

    (13) statement -> multiple_assignment . NEWLINE

    NEWLINE         shift and go to state 39


state 24

    (32) if_block -> IF . LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (33) if_block -> IF . LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (34) if_block -> IF . LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (35) if_block -> IF . LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE

    LPAREN          shift and go to state 40


state 25

    (15) statement -> if_block .
    (16) statement -> if_block . else_block
    (36) else_block -> . ELSE LBRACE body RBRACE NEWLINE
    (37) else_block -> . ELSE LBRACE NEWLINE body RBRACE NEWLINE
    (38) else_block -> . ELSE NEWLINE LBRACE body RBRACE NEWLINE
    (39) else_block -> . ELSE NEWLINE LBRACE NEWLINE body RBRACE NEWLINE

    RBRACE          reduce using rule 15 (statement -> if_block .)
    IDENTIFIER      reduce using rule 15 (statement -> if_block .)
    IF              reduce using rule 15 (statement -> if_block .)
    WHILE           reduce using rule 15 (statement -> if_block .)
    ELSE            shift and go to state 41

    else_block                     shift and go to state 42

state 26

    (17) statement -> while_block . NEWLINE

    NEWLINE         shift and go to state 43


state 27

    (5) head -> IDENTIFIER LPAREN argument_list RPAREN .

    NEWLINE         reduce using rule 5 (head -> IDENTIFIER LPAREN argument_list RPAREN .)
    LBRACE          reduce using rule 5 (head -> IDENTIFIER LPAREN argument_list RPAREN .)


state 28

    (7) argument_list -> argument_declaration COMMA . argument_list
    (6) argument_list -> . argument_declaration
    (7) argument_list -> . argument_declaration COMMA argument_list
    (8) argument_declaration -> . IDENTIFIER
    (9) argument_declaration -> . NUMBER

    IDENTIFIER      shift and go to state 14
    NUMBER          shift and go to state 11

    argument_declaration           shift and go to state 13
    argument_list                  shift and go to state 44

state 29

    (3) function_definition -> head NEWLINE LBRACE NEWLINE body . RBRACE NEWLINE
    (10) body -> body . statement
    (12) statement -> . assignment NEWLINE
    (13) statement -> . multiple_assignment NEWLINE
    (14) statement -> . parralel_assignment NEWLINE
    (15) statement -> . if_block
    (16) statement -> . if_block else_block
    (17) statement -> . while_block NEWLINE
    (18) statement -> . function_call NEWLINE
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) multiple_assignment -> . assignment
    (21) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (22) parralel_assignment -> . assignment
    (23) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (32) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (33) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (30) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (24) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (25) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    RBRACE          shift and go to state 45
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 24
    WHILE           shift and go to state 17

    parralel_assignment            shift and go to state 18
    assignment                     shift and go to state 22
    if_block                       shift and go to state 25
    function_call                  shift and go to state 16
    while_block                    shift and go to state 26
    statement                      shift and go to state 36
    multiple_assignment            shift and go to state 23

state 30

    (18) statement -> function_call NEWLINE .

    RBRACE          reduce using rule 18 (statement -> function_call NEWLINE .)
    IDENTIFIER      reduce using rule 18 (statement -> function_call NEWLINE .)
    IF              reduce using rule 18 (statement -> function_call NEWLINE .)
    WHILE           reduce using rule 18 (statement -> function_call NEWLINE .)


state 31

    (30) while_block -> WHILE LPAREN . condition_list RPAREN LBRACE NEWLINE body RBRACE
    (31) while_block -> WHILE LPAREN . condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (40) condition_list -> . condition
    (41) condition_list -> . condition comb_symbol condition_list
    (44) condition -> . IDENTIFIER comp_symbol IDENTIFIER
    (45) condition -> . IDENTIFIER comp_symbol NUMBER
    (46) condition -> . NUMBER comp_symbol IDENTIFIER
    (47) condition -> . NUMBER comp_symbol NUMBER

    IDENTIFIER      shift and go to state 48
    NUMBER          shift and go to state 47

    condition_list                 shift and go to state 46
    condition                      shift and go to state 49

state 32

    (14) statement -> parralel_assignment NEWLINE .

    RBRACE          reduce using rule 14 (statement -> parralel_assignment NEWLINE .)
    IDENTIFIER      reduce using rule 14 (statement -> parralel_assignment NEWLINE .)
    IF              reduce using rule 14 (statement -> parralel_assignment NEWLINE .)
    WHILE           reduce using rule 14 (statement -> parralel_assignment NEWLINE .)


state 33

    (19) assignment -> IDENTIFIER EQUALS . expression
    (21) multiple_assignment -> IDENTIFIER EQUALS . multiple_assignment
    (25) function_call -> IDENTIFIER EQUALS . IDENTIFIER LPAREN parameters_list RPAREN
    (54) expression -> . expression PLUS expression
    (55) expression -> . expression MINUS expression
    (56) expression -> . expression TIMES expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . MINUS expression
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (20) multiple_assignment -> . assignment
    (21) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (19) assignment -> . IDENTIFIER EQUALS expression

    IDENTIFIER      shift and go to state 53
    MINUS           shift and go to state 55
    NUMBER          shift and go to state 50

    assignment                     shift and go to state 51
    expression                     shift and go to state 54
    multiple_assignment            shift and go to state 52

state 34

    (23) parralel_assignment -> IDENTIFIER COMMA . parralel_assignment COMMA expression
    (22) parralel_assignment -> . assignment
    (23) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (19) assignment -> . IDENTIFIER EQUALS expression

    IDENTIFIER      shift and go to state 58

    parralel_assignment            shift and go to state 56
    assignment                     shift and go to state 57

state 35

    (24) function_call -> IDENTIFIER LPAREN . parameters_list RPAREN
    (26) parameters_list -> . IDENTIFIER
    (27) parameters_list -> . NUMBER
    (28) parameters_list -> . parameters_list COMMA IDENTIFIER
    (29) parameters_list -> . parameters_list COMMA NUMBER

    IDENTIFIER      shift and go to state 61
    NUMBER          shift and go to state 60

    parameters_list                shift and go to state 59

state 36

    (10) body -> body statement .

    RBRACE          reduce using rule 10 (body -> body statement .)
    IDENTIFIER      reduce using rule 10 (body -> body statement .)
    IF              reduce using rule 10 (body -> body statement .)
    WHILE           reduce using rule 10 (body -> body statement .)


state 37

    (4) function_definition -> head LBRACE NEWLINE body RBRACE . NEWLINE

    NEWLINE         shift and go to state 62


state 38

    (12) statement -> assignment NEWLINE .

    RBRACE          reduce using rule 12 (statement -> assignment NEWLINE .)
    IDENTIFIER      reduce using rule 12 (statement -> assignment NEWLINE .)
    IF              reduce using rule 12 (statement -> assignment NEWLINE .)
    WHILE           reduce using rule 12 (statement -> assignment NEWLINE .)


state 39

    (13) statement -> multiple_assignment NEWLINE .

    RBRACE          reduce using rule 13 (statement -> multiple_assignment NEWLINE .)
    IDENTIFIER      reduce using rule 13 (statement -> multiple_assignment NEWLINE .)
    IF              reduce using rule 13 (statement -> multiple_assignment NEWLINE .)
    WHILE           reduce using rule 13 (statement -> multiple_assignment NEWLINE .)


state 40

    (32) if_block -> IF LPAREN . condition_list RPAREN LBRACE body RBRACE NEWLINE
    (33) if_block -> IF LPAREN . condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (34) if_block -> IF LPAREN . condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (35) if_block -> IF LPAREN . condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (40) condition_list -> . condition
    (41) condition_list -> . condition comb_symbol condition_list
    (44) condition -> . IDENTIFIER comp_symbol IDENTIFIER
    (45) condition -> . IDENTIFIER comp_symbol NUMBER
    (46) condition -> . NUMBER comp_symbol IDENTIFIER
    (47) condition -> . NUMBER comp_symbol NUMBER

    IDENTIFIER      shift and go to state 48
    NUMBER          shift and go to state 47

    condition_list                 shift and go to state 63
    condition                      shift and go to state 49

state 41

    (36) else_block -> ELSE . LBRACE body RBRACE NEWLINE
    (37) else_block -> ELSE . LBRACE NEWLINE body RBRACE NEWLINE
    (38) else_block -> ELSE . NEWLINE LBRACE body RBRACE NEWLINE
    (39) else_block -> ELSE . NEWLINE LBRACE NEWLINE body RBRACE NEWLINE

    LBRACE          shift and go to state 65
    NEWLINE         shift and go to state 64


state 42

    (16) statement -> if_block else_block .

    RBRACE          reduce using rule 16 (statement -> if_block else_block .)
    IDENTIFIER      reduce using rule 16 (statement -> if_block else_block .)
    IF              reduce using rule 16 (statement -> if_block else_block .)
    WHILE           reduce using rule 16 (statement -> if_block else_block .)


state 43

    (17) statement -> while_block NEWLINE .

    RBRACE          reduce using rule 17 (statement -> while_block NEWLINE .)
    IDENTIFIER      reduce using rule 17 (statement -> while_block NEWLINE .)
    IF              reduce using rule 17 (statement -> while_block NEWLINE .)
    WHILE           reduce using rule 17 (statement -> while_block NEWLINE .)


state 44

    (7) argument_list -> argument_declaration COMMA argument_list .

    RPAREN          reduce using rule 7 (argument_list -> argument_declaration COMMA argument_list .)


state 45

    (3) function_definition -> head NEWLINE LBRACE NEWLINE body RBRACE . NEWLINE

    NEWLINE         shift and go to state 66


state 46

    (30) while_block -> WHILE LPAREN condition_list . RPAREN LBRACE NEWLINE body RBRACE
    (31) while_block -> WHILE LPAREN condition_list . RPAREN NEWLINE LBRACE NEWLINE body RBRACE

    RPAREN          shift and go to state 67


state 47

    (46) condition -> NUMBER . comp_symbol IDENTIFIER
    (47) condition -> NUMBER . comp_symbol NUMBER
    (48) comp_symbol -> . LT
    (49) comp_symbol -> . GT
    (50) comp_symbol -> . LE
    (51) comp_symbol -> . GE
    (52) comp_symbol -> . EQ
    (53) comp_symbol -> . NE

    LT              shift and go to state 72
    GT              shift and go to state 73
    LE              shift and go to state 68
    GE              shift and go to state 69
    EQ              shift and go to state 74
    NE              shift and go to state 70

    comp_symbol                    shift and go to state 71

state 48

    (44) condition -> IDENTIFIER . comp_symbol IDENTIFIER
    (45) condition -> IDENTIFIER . comp_symbol NUMBER
    (48) comp_symbol -> . LT
    (49) comp_symbol -> . GT
    (50) comp_symbol -> . LE
    (51) comp_symbol -> . GE
    (52) comp_symbol -> . EQ
    (53) comp_symbol -> . NE

    LT              shift and go to state 72
    GT              shift and go to state 73
    LE              shift and go to state 68
    GE              shift and go to state 69
    EQ              shift and go to state 74
    NE              shift and go to state 70

    comp_symbol                    shift and go to state 75

state 49

    (40) condition_list -> condition .
    (41) condition_list -> condition . comb_symbol condition_list
    (42) comb_symbol -> . LAND
    (43) comb_symbol -> . LOR

    RPAREN          reduce using rule 40 (condition_list -> condition .)
    LAND            shift and go to state 78
    LOR             shift and go to state 77

    comb_symbol                    shift and go to state 76

state 50

    (59) expression -> NUMBER .

    PLUS            reduce using rule 59 (expression -> NUMBER .)
    MINUS           reduce using rule 59 (expression -> NUMBER .)
    TIMES           reduce using rule 59 (expression -> NUMBER .)
    DIVIDE          reduce using rule 59 (expression -> NUMBER .)
    NEWLINE         reduce using rule 59 (expression -> NUMBER .)
    COMMA           reduce using rule 59 (expression -> NUMBER .)


state 51

    (20) multiple_assignment -> assignment .

    NEWLINE         reduce using rule 20 (multiple_assignment -> assignment .)


state 52

    (21) multiple_assignment -> IDENTIFIER EQUALS multiple_assignment .

    NEWLINE         reduce using rule 21 (multiple_assignment -> IDENTIFIER EQUALS multiple_assignment .)


state 53

    (25) function_call -> IDENTIFIER EQUALS IDENTIFIER . LPAREN parameters_list RPAREN
    (60) expression -> IDENTIFIER .
    (21) multiple_assignment -> IDENTIFIER . EQUALS multiple_assignment
    (19) assignment -> IDENTIFIER . EQUALS expression

    LPAREN          shift and go to state 80
    PLUS            reduce using rule 60 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 60 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 60 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 60 (expression -> IDENTIFIER .)
    NEWLINE         reduce using rule 60 (expression -> IDENTIFIER .)
    EQUALS          shift and go to state 79


state 54

    (19) assignment -> IDENTIFIER EQUALS expression .
    (54) expression -> expression . PLUS expression
    (55) expression -> expression . MINUS expression
    (56) expression -> expression . TIMES expression
    (57) expression -> expression . DIVIDE expression

    NEWLINE         reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    COMMA           reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 81


state 55

    (58) expression -> MINUS . expression
    (54) expression -> . expression PLUS expression
    (55) expression -> . expression MINUS expression
    (56) expression -> . expression TIMES expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . MINUS expression
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER

    MINUS           shift and go to state 55
    NUMBER          shift and go to state 50
    IDENTIFIER      shift and go to state 85

    expression                     shift and go to state 86

state 56

    (23) parralel_assignment -> IDENTIFIER COMMA parralel_assignment . COMMA expression

    COMMA           shift and go to state 87


state 57

    (22) parralel_assignment -> assignment .

    COMMA           reduce using rule 22 (parralel_assignment -> assignment .)


state 58

    (23) parralel_assignment -> IDENTIFIER . COMMA parralel_assignment COMMA expression
    (19) assignment -> IDENTIFIER . EQUALS expression

    COMMA           shift and go to state 34
    EQUALS          shift and go to state 88


state 59

    (24) function_call -> IDENTIFIER LPAREN parameters_list . RPAREN
    (28) parameters_list -> parameters_list . COMMA IDENTIFIER
    (29) parameters_list -> parameters_list . COMMA NUMBER

    RPAREN          shift and go to state 89
    COMMA           shift and go to state 90


state 60

    (27) parameters_list -> NUMBER .

    RPAREN          reduce using rule 27 (parameters_list -> NUMBER .)
    COMMA           reduce using rule 27 (parameters_list -> NUMBER .)


state 61

    (26) parameters_list -> IDENTIFIER .

    RPAREN          reduce using rule 26 (parameters_list -> IDENTIFIER .)
    COMMA           reduce using rule 26 (parameters_list -> IDENTIFIER .)


state 62

    (4) function_definition -> head LBRACE NEWLINE body RBRACE NEWLINE .

    IDENTIFIER      reduce using rule 4 (function_definition -> head LBRACE NEWLINE body RBRACE NEWLINE .)
    $end            reduce using rule 4 (function_definition -> head LBRACE NEWLINE body RBRACE NEWLINE .)


state 63

    (32) if_block -> IF LPAREN condition_list . RPAREN LBRACE body RBRACE NEWLINE
    (33) if_block -> IF LPAREN condition_list . RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (34) if_block -> IF LPAREN condition_list . RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (35) if_block -> IF LPAREN condition_list . RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE

    RPAREN          shift and go to state 91


state 64

    (38) else_block -> ELSE NEWLINE . LBRACE body RBRACE NEWLINE
    (39) else_block -> ELSE NEWLINE . LBRACE NEWLINE body RBRACE NEWLINE

    LBRACE          shift and go to state 92


state 65

    (36) else_block -> ELSE LBRACE . body RBRACE NEWLINE
    (37) else_block -> ELSE LBRACE . NEWLINE body RBRACE NEWLINE
    (10) body -> . body statement
    (11) body -> . statement
    (12) statement -> . assignment NEWLINE
    (13) statement -> . multiple_assignment NEWLINE
    (14) statement -> . parralel_assignment NEWLINE
    (15) statement -> . if_block
    (16) statement -> . if_block else_block
    (17) statement -> . while_block NEWLINE
    (18) statement -> . function_call NEWLINE
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) multiple_assignment -> . assignment
    (21) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (22) parralel_assignment -> . assignment
    (23) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (32) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (33) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (30) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (24) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (25) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    NEWLINE         shift and go to state 93
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 24
    WHILE           shift and go to state 17

    body                           shift and go to state 94
    parralel_assignment            shift and go to state 18
    assignment                     shift and go to state 22
    if_block                       shift and go to state 25
    function_call                  shift and go to state 16
    while_block                    shift and go to state 26
    statement                      shift and go to state 19
    multiple_assignment            shift and go to state 23

state 66

    (3) function_definition -> head NEWLINE LBRACE NEWLINE body RBRACE NEWLINE .

    IDENTIFIER      reduce using rule 3 (function_definition -> head NEWLINE LBRACE NEWLINE body RBRACE NEWLINE .)
    $end            reduce using rule 3 (function_definition -> head NEWLINE LBRACE NEWLINE body RBRACE NEWLINE .)


state 67

    (30) while_block -> WHILE LPAREN condition_list RPAREN . LBRACE NEWLINE body RBRACE
    (31) while_block -> WHILE LPAREN condition_list RPAREN . NEWLINE LBRACE NEWLINE body RBRACE

    LBRACE          shift and go to state 95
    NEWLINE         shift and go to state 96


state 68

    (50) comp_symbol -> LE .

    IDENTIFIER      reduce using rule 50 (comp_symbol -> LE .)
    NUMBER          reduce using rule 50 (comp_symbol -> LE .)


state 69

    (51) comp_symbol -> GE .

    IDENTIFIER      reduce using rule 51 (comp_symbol -> GE .)
    NUMBER          reduce using rule 51 (comp_symbol -> GE .)


state 70

    (53) comp_symbol -> NE .

    IDENTIFIER      reduce using rule 53 (comp_symbol -> NE .)
    NUMBER          reduce using rule 53 (comp_symbol -> NE .)


state 71

    (46) condition -> NUMBER comp_symbol . IDENTIFIER
    (47) condition -> NUMBER comp_symbol . NUMBER

    IDENTIFIER      shift and go to state 97
    NUMBER          shift and go to state 98


state 72

    (48) comp_symbol -> LT .

    IDENTIFIER      reduce using rule 48 (comp_symbol -> LT .)
    NUMBER          reduce using rule 48 (comp_symbol -> LT .)


state 73

    (49) comp_symbol -> GT .

    IDENTIFIER      reduce using rule 49 (comp_symbol -> GT .)
    NUMBER          reduce using rule 49 (comp_symbol -> GT .)


state 74

    (52) comp_symbol -> EQ .

    IDENTIFIER      reduce using rule 52 (comp_symbol -> EQ .)
    NUMBER          reduce using rule 52 (comp_symbol -> EQ .)


state 75

    (44) condition -> IDENTIFIER comp_symbol . IDENTIFIER
    (45) condition -> IDENTIFIER comp_symbol . NUMBER

    IDENTIFIER      shift and go to state 99
    NUMBER          shift and go to state 100


state 76

    (41) condition_list -> condition comb_symbol . condition_list
    (40) condition_list -> . condition
    (41) condition_list -> . condition comb_symbol condition_list
    (44) condition -> . IDENTIFIER comp_symbol IDENTIFIER
    (45) condition -> . IDENTIFIER comp_symbol NUMBER
    (46) condition -> . NUMBER comp_symbol IDENTIFIER
    (47) condition -> . NUMBER comp_symbol NUMBER

    IDENTIFIER      shift and go to state 48
    NUMBER          shift and go to state 47

    condition_list                 shift and go to state 101
    condition                      shift and go to state 49

state 77

    (43) comb_symbol -> LOR .

    IDENTIFIER      reduce using rule 43 (comb_symbol -> LOR .)
    NUMBER          reduce using rule 43 (comb_symbol -> LOR .)


state 78

    (42) comb_symbol -> LAND .

    IDENTIFIER      reduce using rule 42 (comb_symbol -> LAND .)
    NUMBER          reduce using rule 42 (comb_symbol -> LAND .)


state 79

    (21) multiple_assignment -> IDENTIFIER EQUALS . multiple_assignment
    (19) assignment -> IDENTIFIER EQUALS . expression
    (20) multiple_assignment -> . assignment
    (21) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (54) expression -> . expression PLUS expression
    (55) expression -> . expression MINUS expression
    (56) expression -> . expression TIMES expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . MINUS expression
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (19) assignment -> . IDENTIFIER EQUALS expression

    IDENTIFIER      shift and go to state 102
    MINUS           shift and go to state 55
    NUMBER          shift and go to state 50

    assignment                     shift and go to state 51
    expression                     shift and go to state 54
    multiple_assignment            shift and go to state 52

state 80

    (25) function_call -> IDENTIFIER EQUALS IDENTIFIER LPAREN . parameters_list RPAREN
    (26) parameters_list -> . IDENTIFIER
    (27) parameters_list -> . NUMBER
    (28) parameters_list -> . parameters_list COMMA IDENTIFIER
    (29) parameters_list -> . parameters_list COMMA NUMBER

    IDENTIFIER      shift and go to state 61
    NUMBER          shift and go to state 60

    parameters_list                shift and go to state 103

state 81

    (57) expression -> expression DIVIDE . expression
    (54) expression -> . expression PLUS expression
    (55) expression -> . expression MINUS expression
    (56) expression -> . expression TIMES expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . MINUS expression
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER

    MINUS           shift and go to state 55
    NUMBER          shift and go to state 50
    IDENTIFIER      shift and go to state 85

    expression                     shift and go to state 104

state 82

    (56) expression -> expression TIMES . expression
    (54) expression -> . expression PLUS expression
    (55) expression -> . expression MINUS expression
    (56) expression -> . expression TIMES expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . MINUS expression
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER

    MINUS           shift and go to state 55
    NUMBER          shift and go to state 50
    IDENTIFIER      shift and go to state 85

    expression                     shift and go to state 105

state 83

    (54) expression -> expression PLUS . expression
    (54) expression -> . expression PLUS expression
    (55) expression -> . expression MINUS expression
    (56) expression -> . expression TIMES expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . MINUS expression
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER

    MINUS           shift and go to state 55
    NUMBER          shift and go to state 50
    IDENTIFIER      shift and go to state 85

    expression                     shift and go to state 106

state 84

    (55) expression -> expression MINUS . expression
    (54) expression -> . expression PLUS expression
    (55) expression -> . expression MINUS expression
    (56) expression -> . expression TIMES expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . MINUS expression
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER

    MINUS           shift and go to state 55
    NUMBER          shift and go to state 50
    IDENTIFIER      shift and go to state 85

    expression                     shift and go to state 107

state 85

    (60) expression -> IDENTIFIER .

    PLUS            reduce using rule 60 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 60 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 60 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 60 (expression -> IDENTIFIER .)
    NEWLINE         reduce using rule 60 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 60 (expression -> IDENTIFIER .)


state 86

    (58) expression -> MINUS expression .
    (54) expression -> expression . PLUS expression
    (55) expression -> expression . MINUS expression
    (56) expression -> expression . TIMES expression
    (57) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 58 (expression -> MINUS expression .)
    MINUS           reduce using rule 58 (expression -> MINUS expression .)
    TIMES           reduce using rule 58 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 58 (expression -> MINUS expression .)
    NEWLINE         reduce using rule 58 (expression -> MINUS expression .)
    COMMA           reduce using rule 58 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 83 ]
  ! MINUS           [ shift and go to state 84 ]
  ! TIMES           [ shift and go to state 82 ]
  ! DIVIDE          [ shift and go to state 81 ]


state 87

    (23) parralel_assignment -> IDENTIFIER COMMA parralel_assignment COMMA . expression
    (54) expression -> . expression PLUS expression
    (55) expression -> . expression MINUS expression
    (56) expression -> . expression TIMES expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . MINUS expression
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER

    MINUS           shift and go to state 55
    NUMBER          shift and go to state 50
    IDENTIFIER      shift and go to state 85

    expression                     shift and go to state 108

state 88

    (19) assignment -> IDENTIFIER EQUALS . expression
    (54) expression -> . expression PLUS expression
    (55) expression -> . expression MINUS expression
    (56) expression -> . expression TIMES expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . MINUS expression
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER

    MINUS           shift and go to state 55
    NUMBER          shift and go to state 50
    IDENTIFIER      shift and go to state 85

    expression                     shift and go to state 54

state 89

    (24) function_call -> IDENTIFIER LPAREN parameters_list RPAREN .

    NEWLINE         reduce using rule 24 (function_call -> IDENTIFIER LPAREN parameters_list RPAREN .)


state 90

    (28) parameters_list -> parameters_list COMMA . IDENTIFIER
    (29) parameters_list -> parameters_list COMMA . NUMBER

    IDENTIFIER      shift and go to state 109
    NUMBER          shift and go to state 110


state 91

    (32) if_block -> IF LPAREN condition_list RPAREN . LBRACE body RBRACE NEWLINE
    (33) if_block -> IF LPAREN condition_list RPAREN . NEWLINE LBRACE body RBRACE NEWLINE
    (34) if_block -> IF LPAREN condition_list RPAREN . LBRACE NEWLINE body RBRACE NEWLINE
    (35) if_block -> IF LPAREN condition_list RPAREN . NEWLINE LBRACE NEWLINE body RBRACE NEWLINE

    LBRACE          shift and go to state 111
    NEWLINE         shift and go to state 112


state 92

    (38) else_block -> ELSE NEWLINE LBRACE . body RBRACE NEWLINE
    (39) else_block -> ELSE NEWLINE LBRACE . NEWLINE body RBRACE NEWLINE
    (10) body -> . body statement
    (11) body -> . statement
    (12) statement -> . assignment NEWLINE
    (13) statement -> . multiple_assignment NEWLINE
    (14) statement -> . parralel_assignment NEWLINE
    (15) statement -> . if_block
    (16) statement -> . if_block else_block
    (17) statement -> . while_block NEWLINE
    (18) statement -> . function_call NEWLINE
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) multiple_assignment -> . assignment
    (21) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (22) parralel_assignment -> . assignment
    (23) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (32) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (33) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (30) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (24) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (25) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    NEWLINE         shift and go to state 113
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 24
    WHILE           shift and go to state 17

    body                           shift and go to state 114
    parralel_assignment            shift and go to state 18
    assignment                     shift and go to state 22
    if_block                       shift and go to state 25
    function_call                  shift and go to state 16
    while_block                    shift and go to state 26
    statement                      shift and go to state 19
    multiple_assignment            shift and go to state 23

state 93

    (37) else_block -> ELSE LBRACE NEWLINE . body RBRACE NEWLINE
    (10) body -> . body statement
    (11) body -> . statement
    (12) statement -> . assignment NEWLINE
    (13) statement -> . multiple_assignment NEWLINE
    (14) statement -> . parralel_assignment NEWLINE
    (15) statement -> . if_block
    (16) statement -> . if_block else_block
    (17) statement -> . while_block NEWLINE
    (18) statement -> . function_call NEWLINE
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) multiple_assignment -> . assignment
    (21) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (22) parralel_assignment -> . assignment
    (23) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (32) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (33) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (30) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (24) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (25) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 24
    WHILE           shift and go to state 17

    body                           shift and go to state 115
    parralel_assignment            shift and go to state 18
    assignment                     shift and go to state 22
    if_block                       shift and go to state 25
    function_call                  shift and go to state 16
    while_block                    shift and go to state 26
    statement                      shift and go to state 19
    multiple_assignment            shift and go to state 23

state 94

    (36) else_block -> ELSE LBRACE body . RBRACE NEWLINE
    (10) body -> body . statement
    (12) statement -> . assignment NEWLINE
    (13) statement -> . multiple_assignment NEWLINE
    (14) statement -> . parralel_assignment NEWLINE
    (15) statement -> . if_block
    (16) statement -> . if_block else_block
    (17) statement -> . while_block NEWLINE
    (18) statement -> . function_call NEWLINE
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) multiple_assignment -> . assignment
    (21) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (22) parralel_assignment -> . assignment
    (23) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (32) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (33) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (30) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (24) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (25) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    RBRACE          shift and go to state 116
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 24
    WHILE           shift and go to state 17

    parralel_assignment            shift and go to state 18
    assignment                     shift and go to state 22
    if_block                       shift and go to state 25
    function_call                  shift and go to state 16
    while_block                    shift and go to state 26
    statement                      shift and go to state 36
    multiple_assignment            shift and go to state 23

state 95

    (30) while_block -> WHILE LPAREN condition_list RPAREN LBRACE . NEWLINE body RBRACE

    NEWLINE         shift and go to state 117


state 96

    (31) while_block -> WHILE LPAREN condition_list RPAREN NEWLINE . LBRACE NEWLINE body RBRACE

    LBRACE          shift and go to state 118


state 97

    (46) condition -> NUMBER comp_symbol IDENTIFIER .

    LAND            reduce using rule 46 (condition -> NUMBER comp_symbol IDENTIFIER .)
    LOR             reduce using rule 46 (condition -> NUMBER comp_symbol IDENTIFIER .)
    RPAREN          reduce using rule 46 (condition -> NUMBER comp_symbol IDENTIFIER .)


state 98

    (47) condition -> NUMBER comp_symbol NUMBER .

    LAND            reduce using rule 47 (condition -> NUMBER comp_symbol NUMBER .)
    LOR             reduce using rule 47 (condition -> NUMBER comp_symbol NUMBER .)
    RPAREN          reduce using rule 47 (condition -> NUMBER comp_symbol NUMBER .)


state 99

    (44) condition -> IDENTIFIER comp_symbol IDENTIFIER .

    LAND            reduce using rule 44 (condition -> IDENTIFIER comp_symbol IDENTIFIER .)
    LOR             reduce using rule 44 (condition -> IDENTIFIER comp_symbol IDENTIFIER .)
    RPAREN          reduce using rule 44 (condition -> IDENTIFIER comp_symbol IDENTIFIER .)


state 100

    (45) condition -> IDENTIFIER comp_symbol NUMBER .

    LAND            reduce using rule 45 (condition -> IDENTIFIER comp_symbol NUMBER .)
    LOR             reduce using rule 45 (condition -> IDENTIFIER comp_symbol NUMBER .)
    RPAREN          reduce using rule 45 (condition -> IDENTIFIER comp_symbol NUMBER .)


state 101

    (41) condition_list -> condition comb_symbol condition_list .

    RPAREN          reduce using rule 41 (condition_list -> condition comb_symbol condition_list .)


state 102

    (21) multiple_assignment -> IDENTIFIER . EQUALS multiple_assignment
    (60) expression -> IDENTIFIER .
    (19) assignment -> IDENTIFIER . EQUALS expression

    EQUALS          shift and go to state 79
    PLUS            reduce using rule 60 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 60 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 60 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 60 (expression -> IDENTIFIER .)
    NEWLINE         reduce using rule 60 (expression -> IDENTIFIER .)


state 103

    (25) function_call -> IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list . RPAREN
    (28) parameters_list -> parameters_list . COMMA IDENTIFIER
    (29) parameters_list -> parameters_list . COMMA NUMBER

    RPAREN          shift and go to state 119
    COMMA           shift and go to state 90


state 104

    (57) expression -> expression DIVIDE expression .
    (54) expression -> expression . PLUS expression
    (55) expression -> expression . MINUS expression
    (56) expression -> expression . TIMES expression
    (57) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 57 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 57 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 57 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 57 (expression -> expression DIVIDE expression .)
    NEWLINE         reduce using rule 57 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 57 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 83 ]
  ! MINUS           [ shift and go to state 84 ]
  ! TIMES           [ shift and go to state 82 ]
  ! DIVIDE          [ shift and go to state 81 ]


state 105

    (56) expression -> expression TIMES expression .
    (54) expression -> expression . PLUS expression
    (55) expression -> expression . MINUS expression
    (56) expression -> expression . TIMES expression
    (57) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 56 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 56 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 56 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 56 (expression -> expression TIMES expression .)
    NEWLINE         reduce using rule 56 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 56 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 83 ]
  ! MINUS           [ shift and go to state 84 ]
  ! TIMES           [ shift and go to state 82 ]
  ! DIVIDE          [ shift and go to state 81 ]


state 106

    (54) expression -> expression PLUS expression .
    (54) expression -> expression . PLUS expression
    (55) expression -> expression . MINUS expression
    (56) expression -> expression . TIMES expression
    (57) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 54 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 54 (expression -> expression PLUS expression .)
    NEWLINE         reduce using rule 54 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 54 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 81

  ! TIMES           [ reduce using rule 54 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 54 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 83 ]
  ! MINUS           [ shift and go to state 84 ]


state 107

    (55) expression -> expression MINUS expression .
    (54) expression -> expression . PLUS expression
    (55) expression -> expression . MINUS expression
    (56) expression -> expression . TIMES expression
    (57) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 55 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 55 (expression -> expression MINUS expression .)
    NEWLINE         reduce using rule 55 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 55 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 81

  ! TIMES           [ reduce using rule 55 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 55 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 83 ]
  ! MINUS           [ shift and go to state 84 ]


state 108

    (23) parralel_assignment -> IDENTIFIER COMMA parralel_assignment COMMA expression .
    (54) expression -> expression . PLUS expression
    (55) expression -> expression . MINUS expression
    (56) expression -> expression . TIMES expression
    (57) expression -> expression . DIVIDE expression

    NEWLINE         reduce using rule 23 (parralel_assignment -> IDENTIFIER COMMA parralel_assignment COMMA expression .)
    COMMA           reduce using rule 23 (parralel_assignment -> IDENTIFIER COMMA parralel_assignment COMMA expression .)
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 81


state 109

    (28) parameters_list -> parameters_list COMMA IDENTIFIER .

    RPAREN          reduce using rule 28 (parameters_list -> parameters_list COMMA IDENTIFIER .)
    COMMA           reduce using rule 28 (parameters_list -> parameters_list COMMA IDENTIFIER .)


state 110

    (29) parameters_list -> parameters_list COMMA NUMBER .

    RPAREN          reduce using rule 29 (parameters_list -> parameters_list COMMA NUMBER .)
    COMMA           reduce using rule 29 (parameters_list -> parameters_list COMMA NUMBER .)


state 111

    (32) if_block -> IF LPAREN condition_list RPAREN LBRACE . body RBRACE NEWLINE
    (34) if_block -> IF LPAREN condition_list RPAREN LBRACE . NEWLINE body RBRACE NEWLINE
    (10) body -> . body statement
    (11) body -> . statement
    (12) statement -> . assignment NEWLINE
    (13) statement -> . multiple_assignment NEWLINE
    (14) statement -> . parralel_assignment NEWLINE
    (15) statement -> . if_block
    (16) statement -> . if_block else_block
    (17) statement -> . while_block NEWLINE
    (18) statement -> . function_call NEWLINE
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) multiple_assignment -> . assignment
    (21) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (22) parralel_assignment -> . assignment
    (23) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (32) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (33) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (30) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (24) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (25) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    NEWLINE         shift and go to state 120
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 24
    WHILE           shift and go to state 17

    body                           shift and go to state 121
    parralel_assignment            shift and go to state 18
    assignment                     shift and go to state 22
    if_block                       shift and go to state 25
    function_call                  shift and go to state 16
    while_block                    shift and go to state 26
    statement                      shift and go to state 19
    multiple_assignment            shift and go to state 23

state 112

    (33) if_block -> IF LPAREN condition_list RPAREN NEWLINE . LBRACE body RBRACE NEWLINE
    (35) if_block -> IF LPAREN condition_list RPAREN NEWLINE . LBRACE NEWLINE body RBRACE NEWLINE

    LBRACE          shift and go to state 122


state 113

    (39) else_block -> ELSE NEWLINE LBRACE NEWLINE . body RBRACE NEWLINE
    (10) body -> . body statement
    (11) body -> . statement
    (12) statement -> . assignment NEWLINE
    (13) statement -> . multiple_assignment NEWLINE
    (14) statement -> . parralel_assignment NEWLINE
    (15) statement -> . if_block
    (16) statement -> . if_block else_block
    (17) statement -> . while_block NEWLINE
    (18) statement -> . function_call NEWLINE
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) multiple_assignment -> . assignment
    (21) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (22) parralel_assignment -> . assignment
    (23) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (32) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (33) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (30) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (24) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (25) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 24
    WHILE           shift and go to state 17

    body                           shift and go to state 123
    parralel_assignment            shift and go to state 18
    assignment                     shift and go to state 22
    if_block                       shift and go to state 25
    function_call                  shift and go to state 16
    while_block                    shift and go to state 26
    statement                      shift and go to state 19
    multiple_assignment            shift and go to state 23

state 114

    (38) else_block -> ELSE NEWLINE LBRACE body . RBRACE NEWLINE
    (10) body -> body . statement
    (12) statement -> . assignment NEWLINE
    (13) statement -> . multiple_assignment NEWLINE
    (14) statement -> . parralel_assignment NEWLINE
    (15) statement -> . if_block
    (16) statement -> . if_block else_block
    (17) statement -> . while_block NEWLINE
    (18) statement -> . function_call NEWLINE
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) multiple_assignment -> . assignment
    (21) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (22) parralel_assignment -> . assignment
    (23) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (32) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (33) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (30) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (24) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (25) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    RBRACE          shift and go to state 124
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 24
    WHILE           shift and go to state 17

    parralel_assignment            shift and go to state 18
    assignment                     shift and go to state 22
    if_block                       shift and go to state 25
    function_call                  shift and go to state 16
    while_block                    shift and go to state 26
    statement                      shift and go to state 36
    multiple_assignment            shift and go to state 23

state 115

    (37) else_block -> ELSE LBRACE NEWLINE body . RBRACE NEWLINE
    (10) body -> body . statement
    (12) statement -> . assignment NEWLINE
    (13) statement -> . multiple_assignment NEWLINE
    (14) statement -> . parralel_assignment NEWLINE
    (15) statement -> . if_block
    (16) statement -> . if_block else_block
    (17) statement -> . while_block NEWLINE
    (18) statement -> . function_call NEWLINE
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) multiple_assignment -> . assignment
    (21) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (22) parralel_assignment -> . assignment
    (23) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (32) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (33) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (30) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (24) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (25) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    RBRACE          shift and go to state 125
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 24
    WHILE           shift and go to state 17

    parralel_assignment            shift and go to state 18
    assignment                     shift and go to state 22
    if_block                       shift and go to state 25
    function_call                  shift and go to state 16
    while_block                    shift and go to state 26
    statement                      shift and go to state 36
    multiple_assignment            shift and go to state 23

state 116

    (36) else_block -> ELSE LBRACE body RBRACE . NEWLINE

    NEWLINE         shift and go to state 126


state 117

    (30) while_block -> WHILE LPAREN condition_list RPAREN LBRACE NEWLINE . body RBRACE
    (10) body -> . body statement
    (11) body -> . statement
    (12) statement -> . assignment NEWLINE
    (13) statement -> . multiple_assignment NEWLINE
    (14) statement -> . parralel_assignment NEWLINE
    (15) statement -> . if_block
    (16) statement -> . if_block else_block
    (17) statement -> . while_block NEWLINE
    (18) statement -> . function_call NEWLINE
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) multiple_assignment -> . assignment
    (21) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (22) parralel_assignment -> . assignment
    (23) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (32) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (33) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (30) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (24) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (25) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 24
    WHILE           shift and go to state 17

    body                           shift and go to state 127
    parralel_assignment            shift and go to state 18
    assignment                     shift and go to state 22
    if_block                       shift and go to state 25
    function_call                  shift and go to state 16
    while_block                    shift and go to state 26
    statement                      shift and go to state 19
    multiple_assignment            shift and go to state 23

state 118

    (31) while_block -> WHILE LPAREN condition_list RPAREN NEWLINE LBRACE . NEWLINE body RBRACE

    NEWLINE         shift and go to state 128


state 119

    (25) function_call -> IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN .

    NEWLINE         reduce using rule 25 (function_call -> IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN .)


state 120

    (34) if_block -> IF LPAREN condition_list RPAREN LBRACE NEWLINE . body RBRACE NEWLINE
    (10) body -> . body statement
    (11) body -> . statement
    (12) statement -> . assignment NEWLINE
    (13) statement -> . multiple_assignment NEWLINE
    (14) statement -> . parralel_assignment NEWLINE
    (15) statement -> . if_block
    (16) statement -> . if_block else_block
    (17) statement -> . while_block NEWLINE
    (18) statement -> . function_call NEWLINE
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) multiple_assignment -> . assignment
    (21) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (22) parralel_assignment -> . assignment
    (23) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (32) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (33) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (30) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (24) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (25) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 24
    WHILE           shift and go to state 17

    body                           shift and go to state 129
    parralel_assignment            shift and go to state 18
    assignment                     shift and go to state 22
    if_block                       shift and go to state 25
    function_call                  shift and go to state 16
    while_block                    shift and go to state 26
    statement                      shift and go to state 19
    multiple_assignment            shift and go to state 23

state 121

    (32) if_block -> IF LPAREN condition_list RPAREN LBRACE body . RBRACE NEWLINE
    (10) body -> body . statement
    (12) statement -> . assignment NEWLINE
    (13) statement -> . multiple_assignment NEWLINE
    (14) statement -> . parralel_assignment NEWLINE
    (15) statement -> . if_block
    (16) statement -> . if_block else_block
    (17) statement -> . while_block NEWLINE
    (18) statement -> . function_call NEWLINE
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) multiple_assignment -> . assignment
    (21) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (22) parralel_assignment -> . assignment
    (23) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (32) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (33) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (30) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (24) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (25) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    RBRACE          shift and go to state 130
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 24
    WHILE           shift and go to state 17

    parralel_assignment            shift and go to state 18
    assignment                     shift and go to state 22
    if_block                       shift and go to state 25
    function_call                  shift and go to state 16
    while_block                    shift and go to state 26
    statement                      shift and go to state 36
    multiple_assignment            shift and go to state 23

state 122

    (33) if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE . body RBRACE NEWLINE
    (35) if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE . NEWLINE body RBRACE NEWLINE
    (10) body -> . body statement
    (11) body -> . statement
    (12) statement -> . assignment NEWLINE
    (13) statement -> . multiple_assignment NEWLINE
    (14) statement -> . parralel_assignment NEWLINE
    (15) statement -> . if_block
    (16) statement -> . if_block else_block
    (17) statement -> . while_block NEWLINE
    (18) statement -> . function_call NEWLINE
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) multiple_assignment -> . assignment
    (21) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (22) parralel_assignment -> . assignment
    (23) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (32) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (33) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (30) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (24) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (25) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    NEWLINE         shift and go to state 131
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 24
    WHILE           shift and go to state 17

    body                           shift and go to state 132
    parralel_assignment            shift and go to state 18
    assignment                     shift and go to state 22
    if_block                       shift and go to state 25
    function_call                  shift and go to state 16
    while_block                    shift and go to state 26
    statement                      shift and go to state 19
    multiple_assignment            shift and go to state 23

state 123

    (39) else_block -> ELSE NEWLINE LBRACE NEWLINE body . RBRACE NEWLINE
    (10) body -> body . statement
    (12) statement -> . assignment NEWLINE
    (13) statement -> . multiple_assignment NEWLINE
    (14) statement -> . parralel_assignment NEWLINE
    (15) statement -> . if_block
    (16) statement -> . if_block else_block
    (17) statement -> . while_block NEWLINE
    (18) statement -> . function_call NEWLINE
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) multiple_assignment -> . assignment
    (21) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (22) parralel_assignment -> . assignment
    (23) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (32) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (33) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (30) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (24) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (25) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    RBRACE          shift and go to state 133
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 24
    WHILE           shift and go to state 17

    parralel_assignment            shift and go to state 18
    assignment                     shift and go to state 22
    if_block                       shift and go to state 25
    function_call                  shift and go to state 16
    while_block                    shift and go to state 26
    statement                      shift and go to state 36
    multiple_assignment            shift and go to state 23

state 124

    (38) else_block -> ELSE NEWLINE LBRACE body RBRACE . NEWLINE

    NEWLINE         shift and go to state 134


state 125

    (37) else_block -> ELSE LBRACE NEWLINE body RBRACE . NEWLINE

    NEWLINE         shift and go to state 135


state 126

    (36) else_block -> ELSE LBRACE body RBRACE NEWLINE .

    RBRACE          reduce using rule 36 (else_block -> ELSE LBRACE body RBRACE NEWLINE .)
    IDENTIFIER      reduce using rule 36 (else_block -> ELSE LBRACE body RBRACE NEWLINE .)
    IF              reduce using rule 36 (else_block -> ELSE LBRACE body RBRACE NEWLINE .)
    WHILE           reduce using rule 36 (else_block -> ELSE LBRACE body RBRACE NEWLINE .)


state 127

    (30) while_block -> WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body . RBRACE
    (10) body -> body . statement
    (12) statement -> . assignment NEWLINE
    (13) statement -> . multiple_assignment NEWLINE
    (14) statement -> . parralel_assignment NEWLINE
    (15) statement -> . if_block
    (16) statement -> . if_block else_block
    (17) statement -> . while_block NEWLINE
    (18) statement -> . function_call NEWLINE
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) multiple_assignment -> . assignment
    (21) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (22) parralel_assignment -> . assignment
    (23) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (32) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (33) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (30) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (24) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (25) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    RBRACE          shift and go to state 136
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 24
    WHILE           shift and go to state 17

    parralel_assignment            shift and go to state 18
    assignment                     shift and go to state 22
    if_block                       shift and go to state 25
    function_call                  shift and go to state 16
    while_block                    shift and go to state 26
    statement                      shift and go to state 36
    multiple_assignment            shift and go to state 23

state 128

    (31) while_block -> WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE . body RBRACE
    (10) body -> . body statement
    (11) body -> . statement
    (12) statement -> . assignment NEWLINE
    (13) statement -> . multiple_assignment NEWLINE
    (14) statement -> . parralel_assignment NEWLINE
    (15) statement -> . if_block
    (16) statement -> . if_block else_block
    (17) statement -> . while_block NEWLINE
    (18) statement -> . function_call NEWLINE
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) multiple_assignment -> . assignment
    (21) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (22) parralel_assignment -> . assignment
    (23) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (32) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (33) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (30) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (24) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (25) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 24
    WHILE           shift and go to state 17

    body                           shift and go to state 137
    parralel_assignment            shift and go to state 18
    assignment                     shift and go to state 22
    if_block                       shift and go to state 25
    function_call                  shift and go to state 16
    while_block                    shift and go to state 26
    statement                      shift and go to state 19
    multiple_assignment            shift and go to state 23

state 129

    (34) if_block -> IF LPAREN condition_list RPAREN LBRACE NEWLINE body . RBRACE NEWLINE
    (10) body -> body . statement
    (12) statement -> . assignment NEWLINE
    (13) statement -> . multiple_assignment NEWLINE
    (14) statement -> . parralel_assignment NEWLINE
    (15) statement -> . if_block
    (16) statement -> . if_block else_block
    (17) statement -> . while_block NEWLINE
    (18) statement -> . function_call NEWLINE
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) multiple_assignment -> . assignment
    (21) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (22) parralel_assignment -> . assignment
    (23) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (32) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (33) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (30) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (24) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (25) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    RBRACE          shift and go to state 138
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 24
    WHILE           shift and go to state 17

    parralel_assignment            shift and go to state 18
    assignment                     shift and go to state 22
    if_block                       shift and go to state 25
    function_call                  shift and go to state 16
    while_block                    shift and go to state 26
    statement                      shift and go to state 36
    multiple_assignment            shift and go to state 23

state 130

    (32) if_block -> IF LPAREN condition_list RPAREN LBRACE body RBRACE . NEWLINE

    NEWLINE         shift and go to state 139


state 131

    (35) if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE . body RBRACE NEWLINE
    (10) body -> . body statement
    (11) body -> . statement
    (12) statement -> . assignment NEWLINE
    (13) statement -> . multiple_assignment NEWLINE
    (14) statement -> . parralel_assignment NEWLINE
    (15) statement -> . if_block
    (16) statement -> . if_block else_block
    (17) statement -> . while_block NEWLINE
    (18) statement -> . function_call NEWLINE
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) multiple_assignment -> . assignment
    (21) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (22) parralel_assignment -> . assignment
    (23) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (32) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (33) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (30) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (24) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (25) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 24
    WHILE           shift and go to state 17

    body                           shift and go to state 140
    parralel_assignment            shift and go to state 18
    assignment                     shift and go to state 22
    if_block                       shift and go to state 25
    function_call                  shift and go to state 16
    while_block                    shift and go to state 26
    statement                      shift and go to state 19
    multiple_assignment            shift and go to state 23

state 132

    (33) if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE body . RBRACE NEWLINE
    (10) body -> body . statement
    (12) statement -> . assignment NEWLINE
    (13) statement -> . multiple_assignment NEWLINE
    (14) statement -> . parralel_assignment NEWLINE
    (15) statement -> . if_block
    (16) statement -> . if_block else_block
    (17) statement -> . while_block NEWLINE
    (18) statement -> . function_call NEWLINE
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) multiple_assignment -> . assignment
    (21) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (22) parralel_assignment -> . assignment
    (23) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (32) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (33) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (30) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (24) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (25) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    RBRACE          shift and go to state 141
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 24
    WHILE           shift and go to state 17

    parralel_assignment            shift and go to state 18
    assignment                     shift and go to state 22
    if_block                       shift and go to state 25
    function_call                  shift and go to state 16
    while_block                    shift and go to state 26
    statement                      shift and go to state 36
    multiple_assignment            shift and go to state 23

state 133

    (39) else_block -> ELSE NEWLINE LBRACE NEWLINE body RBRACE . NEWLINE

    NEWLINE         shift and go to state 142


state 134

    (38) else_block -> ELSE NEWLINE LBRACE body RBRACE NEWLINE .

    RBRACE          reduce using rule 38 (else_block -> ELSE NEWLINE LBRACE body RBRACE NEWLINE .)
    IDENTIFIER      reduce using rule 38 (else_block -> ELSE NEWLINE LBRACE body RBRACE NEWLINE .)
    IF              reduce using rule 38 (else_block -> ELSE NEWLINE LBRACE body RBRACE NEWLINE .)
    WHILE           reduce using rule 38 (else_block -> ELSE NEWLINE LBRACE body RBRACE NEWLINE .)


state 135

    (37) else_block -> ELSE LBRACE NEWLINE body RBRACE NEWLINE .

    RBRACE          reduce using rule 37 (else_block -> ELSE LBRACE NEWLINE body RBRACE NEWLINE .)
    IDENTIFIER      reduce using rule 37 (else_block -> ELSE LBRACE NEWLINE body RBRACE NEWLINE .)
    IF              reduce using rule 37 (else_block -> ELSE LBRACE NEWLINE body RBRACE NEWLINE .)
    WHILE           reduce using rule 37 (else_block -> ELSE LBRACE NEWLINE body RBRACE NEWLINE .)


state 136

    (30) while_block -> WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE .

    NEWLINE         reduce using rule 30 (while_block -> WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE .)


state 137

    (31) while_block -> WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body . RBRACE
    (10) body -> body . statement
    (12) statement -> . assignment NEWLINE
    (13) statement -> . multiple_assignment NEWLINE
    (14) statement -> . parralel_assignment NEWLINE
    (15) statement -> . if_block
    (16) statement -> . if_block else_block
    (17) statement -> . while_block NEWLINE
    (18) statement -> . function_call NEWLINE
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) multiple_assignment -> . assignment
    (21) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (22) parralel_assignment -> . assignment
    (23) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (32) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (33) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (30) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (24) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (25) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    RBRACE          shift and go to state 143
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 24
    WHILE           shift and go to state 17

    parralel_assignment            shift and go to state 18
    assignment                     shift and go to state 22
    if_block                       shift and go to state 25
    function_call                  shift and go to state 16
    while_block                    shift and go to state 26
    statement                      shift and go to state 36
    multiple_assignment            shift and go to state 23

state 138

    (34) if_block -> IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE . NEWLINE

    NEWLINE         shift and go to state 144


state 139

    (32) if_block -> IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE .

    ELSE            reduce using rule 32 (if_block -> IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE .)
    RBRACE          reduce using rule 32 (if_block -> IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE .)
    IDENTIFIER      reduce using rule 32 (if_block -> IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE .)
    IF              reduce using rule 32 (if_block -> IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE .)
    WHILE           reduce using rule 32 (if_block -> IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE .)


state 140

    (35) if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body . RBRACE NEWLINE
    (10) body -> body . statement
    (12) statement -> . assignment NEWLINE
    (13) statement -> . multiple_assignment NEWLINE
    (14) statement -> . parralel_assignment NEWLINE
    (15) statement -> . if_block
    (16) statement -> . if_block else_block
    (17) statement -> . while_block NEWLINE
    (18) statement -> . function_call NEWLINE
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) multiple_assignment -> . assignment
    (21) multiple_assignment -> . IDENTIFIER EQUALS multiple_assignment
    (22) parralel_assignment -> . assignment
    (23) parralel_assignment -> . IDENTIFIER COMMA parralel_assignment COMMA expression
    (32) if_block -> . IF LPAREN condition_list RPAREN LBRACE body RBRACE NEWLINE
    (33) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE
    (34) if_block -> . IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE
    (35) if_block -> . IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE
    (30) while_block -> . WHILE LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE
    (31) while_block -> . WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE
    (24) function_call -> . IDENTIFIER LPAREN parameters_list RPAREN
    (25) function_call -> . IDENTIFIER EQUALS IDENTIFIER LPAREN parameters_list RPAREN

    RBRACE          shift and go to state 145
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 24
    WHILE           shift and go to state 17

    parralel_assignment            shift and go to state 18
    assignment                     shift and go to state 22
    if_block                       shift and go to state 25
    function_call                  shift and go to state 16
    while_block                    shift and go to state 26
    statement                      shift and go to state 36
    multiple_assignment            shift and go to state 23

state 141

    (33) if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE . NEWLINE

    NEWLINE         shift and go to state 146


state 142

    (39) else_block -> ELSE NEWLINE LBRACE NEWLINE body RBRACE NEWLINE .

    RBRACE          reduce using rule 39 (else_block -> ELSE NEWLINE LBRACE NEWLINE body RBRACE NEWLINE .)
    IDENTIFIER      reduce using rule 39 (else_block -> ELSE NEWLINE LBRACE NEWLINE body RBRACE NEWLINE .)
    IF              reduce using rule 39 (else_block -> ELSE NEWLINE LBRACE NEWLINE body RBRACE NEWLINE .)
    WHILE           reduce using rule 39 (else_block -> ELSE NEWLINE LBRACE NEWLINE body RBRACE NEWLINE .)


state 143

    (31) while_block -> WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE .

    NEWLINE         reduce using rule 31 (while_block -> WHILE LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE .)


state 144

    (34) if_block -> IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE .

    ELSE            reduce using rule 34 (if_block -> IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE .)
    RBRACE          reduce using rule 34 (if_block -> IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE .)
    IDENTIFIER      reduce using rule 34 (if_block -> IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE .)
    IF              reduce using rule 34 (if_block -> IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE .)
    WHILE           reduce using rule 34 (if_block -> IF LPAREN condition_list RPAREN LBRACE NEWLINE body RBRACE NEWLINE .)


state 145

    (35) if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE . NEWLINE

    NEWLINE         shift and go to state 147


state 146

    (33) if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE .

    ELSE            reduce using rule 33 (if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE .)
    RBRACE          reduce using rule 33 (if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE .)
    IDENTIFIER      reduce using rule 33 (if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE .)
    IF              reduce using rule 33 (if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE .)
    WHILE           reduce using rule 33 (if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE body RBRACE NEWLINE .)


state 147

    (35) if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE .

    ELSE            reduce using rule 35 (if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE .)
    RBRACE          reduce using rule 35 (if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE .)
    IDENTIFIER      reduce using rule 35 (if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE .)
    IF              reduce using rule 35 (if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE .)
    WHILE           reduce using rule 35 (if_block -> IF LPAREN condition_list RPAREN NEWLINE LBRACE NEWLINE body RBRACE NEWLINE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 22 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 22 resolved as shift
